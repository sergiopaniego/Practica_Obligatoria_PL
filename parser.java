
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\027\002\000\002\021\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\030\002" +
    "\000\002\003\005\000\002\031\002\000\002\003\011\000" +
    "\002\032\002\000\002\033\002\000\002\004\011\000\002" +
    "\034\002\000\002\006\006\000\002\035\002\000\002\005" +
    "\007\000\002\005\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\007\004\000\002\007\003\000" +
    "\002\036\002\000\002\010\007\000\002\037\002\000\002" +
    "\010\006\000\002\040\002\000\002\010\007\000\002\041" +
    "\002\000\002\010\010\000\002\042\002\000\002\010\006" +
    "\000\002\043\002\000\002\044\002\000\002\045\002\000" +
    "\002\010\015\000\002\046\002\000\002\047\002\000\002" +
    "\050\002\000\002\051\002\000\002\010\023\000\002\052" +
    "\002\000\002\053\002\000\002\010\011\000\002\054\002" +
    "\000\002\055\002\000\002\010\012\000\002\010\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\004\000\002" +
    "\023\003\000\002\023\003\000\002\017\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\014\003\000\002\056\002\000" +
    "\002\014\006\000\002\012\005\000\002\012\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\057\002\000\002\013\007" +
    "\000\002\060\002\000\002\013\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\015\006\000\002\015\005\000\002\022\003\000\002\022" +
    "\005\000\002\011\003\000\002\011\005\000\002\022\004" +
    "\000\002\020\006\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\012\020\001\021\001\022\001\046\001\001" +
    "\002\000\012\020\013\021\010\022\007\046\012\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\004\052\uffee\001\002\000\004\052\uffef\001\002\000\014" +
    "\002\ufffd\020\013\021\010\022\007\046\012\001\002\000" +
    "\004\052\233\001\002\000\004\052\ufff0\001\002\000\004" +
    "\052\ufffc\001\002\000\004\002\000\001\002\000\004\052" +
    "\020\001\002\000\014\002\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\046\ufffb\001\002\000\004\004\021\001\002\000\010\020" +
    "\ufff8\021\ufff8\022\ufff8\001\002\000\010\020\013\021\010" +
    "\022\007\001\002\000\006\005\027\023\026\001\002\000" +
    "\004\052\025\001\002\000\006\005\ufff1\023\ufff1\001\002" +
    "\000\010\020\ufff3\021\ufff3\022\ufff3\001\002\000\004\006" +
    "\ufff7\001\002\000\004\006\032\001\002\000\014\002\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\046\ufff6\001\002\000\026\006" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\027\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\042\ufff5\052\ufff5\001\002\000\026\006\032\020" +
    "\013\021\010\022\007\027\046\031\045\033\037\034\035" +
    "\042\044\052\036\001\002\000\030\006\uffd2\007\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\027\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\042\uffd2\052\uffd2\001\002\000\014\004\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\052\uffe3\001\002\000\012\004\214\025\215" +
    "\047\115\050\116\001\002\000\004\004\174\001\002\000" +
    "\030\006\032\007\172\020\013\021\010\022\007\027\046" +
    "\031\045\033\037\034\035\042\044\052\036\001\002\000" +
    "\030\006\uffec\007\uffec\020\uffec\021\uffec\022\uffec\027\uffec" +
    "\031\uffec\033\uffec\034\uffec\042\uffec\052\uffec\001\002\000" +
    "\004\052\uffe9\001\002\000\004\025\157\001\002\000\004" +
    "\006\uffd5\001\002\000\004\004\136\001\002\000\004\004" +
    "\047\001\002\000\016\004\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\045\uffd8\052\uffd8\001\002\000\016\004\056\015\053\016" +
    "\051\017\061\045\052\052\055\001\002\000\040\005\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\023\uffb7\024" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7" +
    "\044\uffb7\001\002\000\014\004\056\015\053\016\051\017" +
    "\061\052\055\001\002\000\040\005\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\023\uffb8\024\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\001\002" +
    "\000\040\005\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\023\uffc2\024\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\043\uffc2\044\uffc2\001\002\000\046\004\114\005" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\023\uffb2" +
    "\024\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043" +
    "\uffb2\044\uffb2\047\115\050\116\001\002\000\014\004\uffba" +
    "\015\uffba\016\uffba\017\uffba\052\uffba\001\002\000\012\005" +
    "\uffd0\024\uffd0\043\uffd0\044\uffd0\001\002\000\040\005\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\023\uffb5\024" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\043\uffb5" +
    "\044\uffb5\001\002\000\040\005\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\023\uffb6\024\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\001\002\000" +
    "\026\010\100\011\102\012\104\013\075\014\077\035\076" +
    "\036\106\037\105\040\101\041\074\001\002\000\010\005" +
    "\065\043\064\044\066\001\002\000\016\004\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\045\uffcd\052\uffcd\001\002\000\004\006" +
    "\uffd7\001\002\000\016\004\uffce\015\uffce\016\uffce\017\uffce" +
    "\045\uffce\052\uffce\001\002\000\016\004\056\015\053\016" +
    "\051\017\061\045\052\052\055\001\002\000\012\005\uffd1" +
    "\024\uffd1\043\064\044\066\001\002\000\004\006\032\001" +
    "\002\000\030\006\uffd6\007\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\027\uffd6\031\uffd6\033\uffd6\034\uffd6\042\uffd6\052\uffd6\001" +
    "\002\000\014\004\056\015\053\016\051\017\061\052\055" +
    "\001\002\000\014\004\uffcb\015\uffcb\016\uffcb\017\uffcb\052" +
    "\uffcb\001\002\000\014\004\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\052\uffbe\001\002\000\014\004\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\052\uffc9\001\002\000\014\004\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\052\uffbd\001\002\000\014\004\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\052\uffc1\001\002\000\014\004\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\052\uffc8\001\002\000\014\004\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\052\uffc0\001\002\000\014\004\056" +
    "\015\053\016\051\017\061\052\055\001\002\000\014\004" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\052\uffbf\001\002\000\014" +
    "\004\uffc7\015\uffc7\016\uffc7\017\uffc7\052\uffc7\001\002\000" +
    "\014\004\uffca\015\uffca\016\uffca\017\uffca\052\uffca\001\002" +
    "\000\024\005\uffcc\010\100\011\102\012\104\013\075\014" +
    "\077\024\uffcc\043\uffcc\044\uffcc\001\002\000\040\005\uffc3" +
    "\010\100\011\102\012\104\013\075\014\077\023\uffc3\024" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3" +
    "\044\uffc3\001\002\000\014\004\056\015\053\016\051\017" +
    "\061\052\055\001\002\000\016\005\113\010\100\011\102" +
    "\012\104\013\075\014\077\001\002\000\040\005\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\023\uffb9\024\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044" +
    "\uffb9\001\002\000\014\004\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\052\uffbc\001\002\000\004\052\125\001\002\000\004\015" +
    "\123\001\002\000\044\005\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\023\uffae\024\uffae\025\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae\050\120" +
    "\001\002\000\004\015\121\001\002\000\004\051\122\001" +
    "\002\000\044\005\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\023\uffad\024\uffad\025\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\043\uffad\044\uffad\050\uffad\001\002" +
    "\000\004\051\124\001\002\000\044\005\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\023\uffac\024\uffac\025\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\043\uffac\044" +
    "\uffac\050\uffac\001\002\000\042\005\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\023\uffb1\024\uffb1\025\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1" +
    "\001\002\000\014\004\056\015\053\016\051\017\061\052" +
    "\055\001\002\000\006\005\132\023\131\001\002\000\020" +
    "\005\uffc6\010\100\011\102\012\104\013\075\014\077\023" +
    "\uffc6\001\002\000\014\004\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\052\uffc5\001\002\000\040\005\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\023\uffbb\024\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\001\002\000" +
    "\014\004\056\015\053\016\051\017\061\052\055\001\002" +
    "\000\020\005\uffc4\010\100\011\102\012\104\013\075\014" +
    "\077\023\uffc4\001\002\000\012\005\uffcf\024\uffcf\043\uffcf" +
    "\044\uffcf\001\002\000\016\004\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\045\uffe1\052\uffe1\001\002\000\016\004\056\015\053" +
    "\016\051\017\061\045\052\052\055\001\002\000\010\005" +
    "\141\043\064\044\066\001\002\000\004\032\142\001\002" +
    "\000\004\006\uffe0\001\002\000\004\006\032\001\002\000" +
    "\004\030\145\001\002\000\004\006\uffdf\001\002\000\004" +
    "\006\032\001\002\000\030\006\uffde\007\uffde\020\uffde\021" +
    "\uffde\022\uffde\027\uffde\031\uffde\033\uffde\034\uffde\042\uffde" +
    "\052\uffde\001\002\000\004\006\032\001\002\000\004\026" +
    "\152\001\002\000\004\004\153\001\002\000\016\004\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\045\uffd4\052\uffd4\001\002\000" +
    "\016\004\056\015\053\016\051\017\061\045\052\052\055" +
    "\001\002\000\010\005\156\043\064\044\066\001\002\000" +
    "\030\006\uffd3\007\uffd3\020\uffd3\021\uffd3\022\uffd3\027\uffd3" +
    "\031\uffd3\033\uffd3\034\uffd3\042\uffd3\052\uffd3\001\002\000" +
    "\014\004\uffeb\015\uffeb\016\uffeb\017\uffeb\052\uffeb\001\002" +
    "\000\014\004\056\015\053\016\051\017\061\052\055\001" +
    "\002\000\016\010\100\011\102\012\104\013\075\014\077" +
    "\024\162\001\002\000\030\006\uffea\007\uffea\020\uffea\021" +
    "\uffea\022\uffea\027\uffea\031\uffea\033\uffea\034\uffea\042\uffea" +
    "\052\uffea\001\002\000\004\052\166\001\002\000\006\023" +
    "\uffb0\024\uffb0\001\002\000\006\023\167\024\170\001\002" +
    "\000\012\023\uffb2\024\uffb2\047\115\050\116\001\002\000" +
    "\004\052\166\001\002\000\030\006\uffe8\007\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\027\uffe8\031\uffe8\033\uffe8\034\uffe8\042" +
    "\uffe8\052\uffe8\001\002\000\006\023\uffaf\024\uffaf\001\002" +
    "\000\040\002\ufff4\006\ufff4\007\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4" +
    "\042\ufff4\046\ufff4\052\ufff4\001\002\000\030\006\uffed\007" +
    "\uffed\020\uffed\021\uffed\022\uffed\027\uffed\031\uffed\033\uffed" +
    "\034\uffed\042\uffed\052\uffed\001\002\000\004\052\175\001" +
    "\002\000\004\025\176\001\002\000\014\004\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\052\uffdd\001\002\000\014\004\056\015" +
    "\053\016\051\017\061\052\055\001\002\000\016\010\100" +
    "\011\102\012\104\013\075\014\077\024\201\001\002\000" +
    "\016\004\uffdc\015\uffdc\016\uffdc\017\uffdc\045\uffdc\052\uffdc" +
    "\001\002\000\016\004\056\015\053\016\051\017\061\045" +
    "\052\052\055\001\002\000\010\024\204\043\064\044\066" +
    "\001\002\000\004\052\205\001\002\000\004\025\206\001" +
    "\002\000\014\004\uffdb\015\uffdb\016\uffdb\017\uffdb\052\uffdb" +
    "\001\002\000\014\004\056\015\053\016\051\017\061\052" +
    "\055\001\002\000\016\005\211\010\100\011\102\012\104" +
    "\013\075\014\077\001\002\000\004\006\uffda\001\002\000" +
    "\004\006\032\001\002\000\030\006\uffd9\007\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\027\uffd9\031\uffd9\033\uffd9\034\uffd9\042" +
    "\uffd9\052\uffd9\001\002\000\014\004\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\052\uffe5\001\002\000\014\004\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\052\uffe7\001\002\000\014\004\056\015\053" +
    "\016\051\017\061\052\055\001\002\000\016\010\100\011" +
    "\102\012\104\013\075\014\077\024\220\001\002\000\030" +
    "\006\uffe6\007\uffe6\020\uffe6\021\uffe6\022\uffe6\027\uffe6\031" +
    "\uffe6\033\uffe6\034\uffe6\042\uffe6\052\uffe6\001\002\000\014" +
    "\004\056\015\053\016\051\017\061\052\055\001\002\000" +
    "\006\005\223\023\131\001\002\000\004\024\224\001\002" +
    "\000\030\006\uffe4\007\uffe4\020\uffe4\021\uffe4\022\uffe4\027" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\042\uffe4\052\uffe4\001\002" +
    "\000\014\004\056\015\053\016\051\017\061\052\055\001" +
    "\002\000\016\010\100\011\102\012\104\013\075\014\077" +
    "\024\227\001\002\000\030\006\uffe2\007\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\042\uffe2" +
    "\052\uffe2\001\002\000\010\020\013\021\010\022\007\001" +
    "\002\000\004\052\232\001\002\000\006\005\ufff2\023\ufff2" +
    "\001\002\000\004\006\234\001\002\000\010\020\ufffa\021" +
    "\ufffa\022\ufffa\001\002\000\010\020\013\021\010\022\007" +
    "\001\002\000\012\007\242\020\013\021\010\022\007\001" +
    "\002\000\004\052\166\001\002\000\006\023\167\024\241" +
    "\001\002\000\012\007\uffb3\020\uffb3\021\uffb3\022\uffb3\001" +
    "\002\000\004\024\246\001\002\000\004\052\166\001\002" +
    "\000\006\023\167\024\245\001\002\000\012\007\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\001\002\000\014\002\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\046\ufff9\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\021\004\027\003\001\001\000\010\002" +
    "\014\003\010\025\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\246\003\010\025\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\015\001\001\000\002\001\001\000" +
    "\004\004\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\021\001\001\000\006\005\022\025\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\227\001\001\000\004\033\027\001\001\000" +
    "\004\006\030\001\001\000\002\001\001\000\004\034\032" +
    "\001\001\000\014\006\033\007\037\010\040\022\042\025" +
    "\041\001\001\000\002\001\001\000\004\042\224\001\001" +
    "\000\004\020\116\001\001\000\002\001\001\000\012\006" +
    "\033\010\172\022\042\025\041\001\001\000\002\001\001" +
    "\000\004\037\162\001\001\000\002\001\001\000\004\054" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\047\001\001\000\014\012\061\013\053\016\062\017" +
    "\056\022\057\001\001\000\002\001\001\000\012\012\061" +
    "\013\053\017\134\022\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\116\001\001\000\004\060\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\102\026\072\001\001\000\004\023\066" +
    "\001\001\000\002\001\001\000\004\053\070\001\001\000" +
    "\002\001\001\000\014\012\061\013\053\016\067\017\056" +
    "\022\057\001\001\000\004\023\066\001\001\000\004\006" +
    "\071\001\001\000\002\001\001\000\010\012\107\013\053" +
    "\022\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\106\013\053\022" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\072\001\001\000\004\026\072\001" +
    "\001\000\010\012\111\013\053\022\057\001\001\000\004" +
    "\026\072\001\001\000\002\001\001\000\004\057\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\127\013\053\014\126\022\057\001\001\000\002\001" +
    "\001\000\004\026\072\001\001\000\004\056\132\001\001" +
    "\000\002\001\001\000\010\012\133\013\053\022\057\001" +
    "\001\000\004\026\072\001\001\000\002\001\001\000\004" +
    "\043\136\001\001\000\014\012\061\013\053\016\137\017" +
    "\056\022\057\001\001\000\004\023\066\001\001\000\002" +
    "\001\001\000\004\044\142\001\001\000\004\006\143\001" +
    "\001\000\002\001\001\000\004\045\145\001\001\000\004" +
    "\006\146\001\001\000\002\001\001\000\004\006\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\153" +
    "\001\001\000\014\012\061\013\053\016\154\017\056\022" +
    "\057\001\001\000\004\023\066\001\001\000\002\001\001" +
    "\000\004\036\157\001\001\000\010\012\160\013\053\022" +
    "\057\001\001\000\004\026\072\001\001\000\002\001\001" +
    "\000\006\011\164\022\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\116\001\001\000\004\022\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\176\001\001\000\010\012\177\013\053\022" +
    "\057\001\001\000\004\026\072\001\001\000\004\047\201" +
    "\001\001\000\014\012\061\013\053\016\202\017\056\022" +
    "\057\001\001\000\004\023\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\206\001\001\000\010\012" +
    "\207\013\053\022\057\001\001\000\004\026\072\001\001" +
    "\000\004\051\211\001\001\000\004\006\212\001\001\000" +
    "\002\001\001\000\004\041\220\001\001\000\004\040\215" +
    "\001\001\000\010\012\216\013\053\022\057\001\001\000" +
    "\004\026\072\001\001\000\002\001\001\000\012\012\127" +
    "\013\053\014\221\022\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\225\013\053" +
    "\022\057\001\001\000\004\026\072\001\001\000\002\001" +
    "\001\000\004\025\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\234\001\001\000" +
    "\006\015\235\025\236\001\001\000\004\025\242\001\001" +
    "\000\006\011\237\022\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\243\022\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title></title>");System.out.println("</head>");System.out.println("<body>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NT$0 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</body>");System.out.println("</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PART ::= TYPE NT$1 RESTPART 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.println("struct "+ident1+" {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PART ::= struct ident left_bracket NT$2 LFIELD right_bracket semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		System.out.println("};");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print(ident1+" (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTPART ::= ident left_parenthesis NT$3 LISTPARAM right_parenthesis NT$4 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("{");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLQ ::= left_bracket NT$5 SENTLIST right_bracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.print(", ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTPARAM ::= LISTPARAM comma NT$6 TYPE ident 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.print(ident1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
}; System.out.print(ident1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= void_token 
            {
              String RESULT =null;
		RESULT = "v";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= int_token 
            {
              String RESULT =null;
		RESULT = "i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= float_token 
            {
              String RESULT =null;
		RESULT = "f";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print(ident1+" = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= ID equal NT$7 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$8 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= TYPE NT$8 LID semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(ident1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print(ident1+" = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= ident equal NT$9 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$10 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print(ident1+"( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= ident left_parenthesis NT$10 LEXP right_parenthesis semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		System.out.println(");");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$11 ::= 
            {
              Object RESULT =null;
System.out.print("return");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= return_token NT$11 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              Object RESULT =null;
System.out.print("if (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
System.out.print(") then");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
System.out.print("else");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= if_token left_parenthesis NT$12 LCOND right_parenthesis then_token NT$13 BLQ else_token NT$14 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$15 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("for("+ident1+ " = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.println(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("; "+ident2+" = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= for_token left_parenthesis ident equal NT$15 EXP semicolon NT$16 LCOND semicolon ident equal NT$17 EXP right_parenthesis NT$18 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$19 ::= 
            {
              Object RESULT =null;
System.out.print("while (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= while_token left_parenthesis NT$19 LCOND right_parenthesis NT$20 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$21 ::= 
            {
              Object RESULT =null;
System.out.print("do ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
System.out.print("until (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= do_token NT$21 BLQ until_token left_parenthesis NT$22 LCOND right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(opl){
case "a": System.out.println("and"); break;
case "o": System.out.println("or"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCOND ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCOND ::= not COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPL ::= or 
            {
              String RESULT =null;
		RESULT = "o";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPL ::= and 
            {
              String RESULT =null;
		RESULT = "a";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(opr){
case "lt": System.out.println("<"); break;
case "mt": System.out.println(">"); break;
case "mte": System.out.println(">="); break;
case "lte": System.out.println("<="); break;
case "de": System.out.println("=="); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPR ::= double_equal 
            {
              String RESULT =null;
		RESULT = "de";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPR ::= less_than 
            {
              String RESULT =null;
		RESULT = "lt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPR ::= more_than 
            {
              String RESULT =null;
		RESULT = "mt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPR ::= more_than_equal_to 
            {
              String RESULT =null;
		RESULT = "mte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPR ::= less_than_equal_to 
            {
              String RESULT =null;
		RESULT = "lte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LEXP ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$23 ::= 
            {
              Object RESULT =null;
System.out.println(",");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LEXP ::= LEXP comma NT$23 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(exp1);switch(op){
case "sa": System.out.print(" + "); break;
case "ss": System.out.println(" - "); break;
case "ms": System.out.println(" * "); break;
case "s": System.out.println(" / "); break;
case "p": System.out.println(" % "); break;
};System.out.print(exp2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP ::= addition_sign 
            {
              String RESULT =null;
		RESULT = "as";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP ::= substraction_sign 
            {
              String RESULT =null;
		RESULT = "ss";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= multiplication_sign 
            {
              String RESULT =null;
		RESULT = "ms";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= slash 
            {
              String RESULT =null;
		RESULT = "s";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= percent 
            {
              String RESULT =null;
		RESULT = "p";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print(ident1 +" (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTOR ::= ident left_parenthesis NT$24 LEXP right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$25 ::= 
            {
              Object RESULT =null;
System.out.print("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FACTOR ::= left_parenthesis NT$25 EXP right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FACTOR ::= constint 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FACTOR ::= constfloat 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FACTOR ::= constlit 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FACTOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println(ident1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LFIELD ::= TYPE LID semicolon 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println(ident1+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ID ::= ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = ident1;RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ID ::= ident dot ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ident1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LID ::= ID 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ident1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LID ::= LID comma ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ID ::= ident LDIM 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ident1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
