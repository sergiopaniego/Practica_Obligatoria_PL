package practica_pl;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\027\002\000\002\021\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\004" +
    "\000\002\003\010\000\002\004\007\000\002\006\005\000" +
    "\002\005\006\000\002\005\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\007\004\000\002\007" +
    "\003\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\010\007\000\002\010\005\000\002\010\012\000" +
    "\002\010\017\000\002\010\007\000\002\010\010\000\002" +
    "\010\003\000\002\016\005\000\002\016\003\000\002\016" +
    "\004\000\002\023\003\000\002\023\003\000\002\017\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\014\003\000\002" +
    "\014\005\000\002\012\005\000\002\012\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\013\006\000\002\013\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\006\000\002\015\005\000\002\022" +
    "\003\000\002\022\005\000\002\011\003\000\002\011\005" +
    "\000\002\022\004\000\002\020\006\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\012\020\001\021\001\022\001\046\001\001" +
    "\002\000\012\020\013\021\010\022\007\046\011\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\004\052\ufff4\001\002\000\004\052\ufff5\001\002\000\004" +
    "\052\204\001\002\000\014\002\ufffd\020\013\021\010\022" +
    "\007\046\011\001\002\000\004\052\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\052\017\001\002\000\014\002" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\046\ufffc\001\002\000\004" +
    "\004\020\001\002\000\010\020\013\021\010\022\007\001" +
    "\002\000\006\005\025\023\024\001\002\000\004\052\023" +
    "\001\002\000\006\005\ufff7\023\ufff7\001\002\000\010\020" +
    "\013\021\010\022\007\001\002\000\004\006\027\001\002" +
    "\000\014\002\ufffa\020\ufffa\021\ufffa\022\ufffa\046\ufffa\001" +
    "\002\000\026\006\027\020\013\021\010\022\007\027\042" +
    "\031\041\033\032\034\030\042\040\052\033\001\002\000" +
    "\014\004\051\015\046\016\044\017\054\052\050\001\002" +
    "\000\030\006\uffe8\007\uffe8\020\uffe8\021\uffe8\022\uffe8\027" +
    "\uffe8\031\uffe8\033\uffe8\034\uffe8\042\uffe8\052\uffe8\001\002" +
    "\000\004\004\163\001\002\000\012\004\154\025\155\047" +
    "\106\050\107\001\002\000\030\006\027\007\152\020\013" +
    "\021\010\022\007\027\042\031\041\033\032\034\030\042" +
    "\040\052\033\001\002\000\030\006\ufff2\007\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\027\ufff2\031\ufff2\033\ufff2\034\ufff2\042" +
    "\ufff2\052\ufff2\001\002\000\004\052\146\001\002\000\004" +
    "\025\141\001\002\000\004\006\027\001\002\000\004\004" +
    "\125\001\002\000\004\004\043\001\002\000\016\004\051" +
    "\015\046\016\044\017\054\045\045\052\050\001\002\000" +
    "\040\005\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\023\uffd0\024\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\043\uffd0\044\uffd0\001\002\000\014\004\051\015\046" +
    "\016\044\017\054\052\050\001\002\000\040\005\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\023\uffd1\024\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\040\005\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\023\uffd9\024\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\001\002\000\046" +
    "\004\105\005\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\023\uffcb\024\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\043\uffcb\044\uffcb\047\106\050\107\001\002\000" +
    "\014\004\051\015\046\016\044\017\054\052\050\001\002" +
    "\000\012\005\uffe6\024\uffe6\043\uffe6\044\uffe6\001\002\000" +
    "\040\005\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\023\uffce\024\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\043\uffce\044\uffce\001\002\000\040\005\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\023\uffcf\024\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf" +
    "\001\002\000\026\010\073\011\074\012\076\013\067\014" +
    "\071\035\070\036\100\037\077\040\072\041\066\001\002" +
    "\000\010\005\061\043\057\044\060\001\002\000\016\004" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\045\uffe3\052\uffe3\001\002" +
    "\000\016\004\uffe4\015\uffe4\016\uffe4\017\uffe4\045\uffe4\052" +
    "\uffe4\001\002\000\004\006\027\001\002\000\016\004\051" +
    "\015\046\016\044\017\054\045\045\052\050\001\002\000" +
    "\012\005\uffe7\024\uffe7\043\057\044\060\001\002\000\030" +
    "\006\uffea\007\uffea\020\uffea\021\uffea\022\uffea\027\uffea\031" +
    "\uffea\033\uffea\034\uffea\042\uffea\052\uffea\001\002\000\014" +
    "\004\051\015\046\016\044\017\054\052\050\001\002\000" +
    "\014\004\uffe1\015\uffe1\016\uffe1\017\uffe1\052\uffe1\001\002" +
    "\000\014\004\uffd5\015\uffd5\016\uffd5\017\uffd5\052\uffd5\001" +
    "\002\000\014\004\uffdf\015\uffdf\016\uffdf\017\uffdf\052\uffdf" +
    "\001\002\000\014\004\uffd4\015\uffd4\016\uffd4\017\uffd4\052" +
    "\uffd4\001\002\000\014\004\uffde\015\uffde\016\uffde\017\uffde" +
    "\052\uffde\001\002\000\014\004\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\052\uffd8\001\002\000\014\004\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\052\uffd7\001\002\000\014\004\051\015\046\016" +
    "\044\017\054\052\050\001\002\000\014\004\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\052\uffd6\001\002\000\014\004\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\052\uffdd\001\002\000\014\004\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\052\uffe0\001\002\000\024\005" +
    "\uffe2\010\073\011\074\012\076\013\067\014\071\024\uffe2" +
    "\043\uffe2\044\uffe2\001\002\000\040\005\uffda\010\073\011" +
    "\074\012\076\013\067\014\071\023\uffda\024\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\001" +
    "\002\000\016\005\104\010\073\011\074\012\076\013\067" +
    "\014\071\001\002\000\040\005\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\023\uffd2\024\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\001\002\000" +
    "\014\004\051\015\046\016\044\017\054\052\050\001\002" +
    "\000\004\052\116\001\002\000\004\015\114\001\002\000" +
    "\044\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\050\111\001\002\000\004" +
    "\015\112\001\002\000\004\051\113\001\002\000\044\005" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\043\uffc6\044\uffc6\050\uffc6\001\002\000\004\051\115" +
    "\001\002\000\044\005\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\023\uffc5\024\uffc5\025\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\050\uffc5\001" +
    "\002\000\042\005\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\023\uffca\024\uffca\025\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\043\uffca\044\uffca\001\002\000\006" +
    "\005\122\023\121\001\002\000\020\005\uffdc\010\073\011" +
    "\074\012\076\013\067\014\071\023\uffdc\001\002\000\014" +
    "\004\051\015\046\016\044\017\054\052\050\001\002\000" +
    "\040\005\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\023\uffd3\024\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\043\uffd3\044\uffd3\001\002\000\020\005\uffdb\010\073" +
    "\011\074\012\076\013\067\014\071\023\uffdb\001\002\000" +
    "\012\005\uffe5\024\uffe5\043\uffe5\044\uffe5\001\002\000\016" +
    "\004\051\015\046\016\044\017\054\045\045\052\050\001" +
    "\002\000\010\005\127\043\057\044\060\001\002\000\004" +
    "\032\130\001\002\000\004\006\027\001\002\000\004\030" +
    "\132\001\002\000\004\006\027\001\002\000\030\006\uffec" +
    "\007\uffec\020\uffec\021\uffec\022\uffec\027\uffec\031\uffec\033" +
    "\uffec\034\uffec\042\uffec\052\uffec\001\002\000\004\026\135" +
    "\001\002\000\004\004\136\001\002\000\016\004\051\015" +
    "\046\016\044\017\054\045\045\052\050\001\002\000\010" +
    "\005\140\043\057\044\060\001\002\000\030\006\uffe9\007" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\027\uffe9\031\uffe9\033\uffe9" +
    "\034\uffe9\042\uffe9\052\uffe9\001\002\000\014\004\051\015" +
    "\046\016\044\017\054\052\050\001\002\000\016\010\073" +
    "\011\074\012\076\013\067\014\071\024\143\001\002\000" +
    "\030\006\ufff1\007\ufff1\020\ufff1\021\ufff1\022\ufff1\027\ufff1" +
    "\031\ufff1\033\ufff1\034\ufff1\042\ufff1\052\ufff1\001\002\000" +
    "\006\023\uffc9\024\uffc9\001\002\000\006\023\147\024\150" +
    "\001\002\000\012\023\uffcb\024\uffcb\047\106\050\107\001" +
    "\002\000\004\052\146\001\002\000\030\006\ufff0\007\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\027\ufff0\031\ufff0\033\ufff0\034" +
    "\ufff0\042\ufff0\052\ufff0\001\002\000\006\023\uffc8\024\uffc8" +
    "\001\002\000\040\002\ufff9\006\ufff9\007\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\042\ufff9\046\ufff9\052\ufff9\001\002\000\030\006" +
    "\ufff3\007\ufff3\020\ufff3\021\ufff3\022\ufff3\027\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\042\ufff3\052\ufff3\001\002\000\014\004" +
    "\051\015\046\016\044\017\054\052\050\001\002\000\014" +
    "\004\051\015\046\016\044\017\054\052\050\001\002\000" +
    "\016\010\073\011\074\012\076\013\067\014\071\024\157" +
    "\001\002\000\030\006\uffef\007\uffef\020\uffef\021\uffef\022" +
    "\uffef\027\uffef\031\uffef\033\uffef\034\uffef\042\uffef\052\uffef" +
    "\001\002\000\006\005\161\023\121\001\002\000\004\024" +
    "\162\001\002\000\030\006\uffee\007\uffee\020\uffee\021\uffee" +
    "\022\uffee\027\uffee\031\uffee\033\uffee\034\uffee\042\uffee\052" +
    "\uffee\001\002\000\004\052\164\001\002\000\004\025\165" +
    "\001\002\000\014\004\051\015\046\016\044\017\054\052" +
    "\050\001\002\000\016\010\073\011\074\012\076\013\067" +
    "\014\071\024\167\001\002\000\016\004\051\015\046\016" +
    "\044\017\054\045\045\052\050\001\002\000\010\024\171" +
    "\043\057\044\060\001\002\000\004\052\172\001\002\000" +
    "\004\025\173\001\002\000\014\004\051\015\046\016\044" +
    "\017\054\052\050\001\002\000\016\005\175\010\073\011" +
    "\074\012\076\013\067\014\071\001\002\000\004\006\027" +
    "\001\002\000\030\006\uffeb\007\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb\042\uffeb\052\uffeb" +
    "\001\002\000\016\010\073\011\074\012\076\013\067\014" +
    "\071\024\200\001\002\000\030\006\uffed\007\uffed\020\uffed" +
    "\021\uffed\022\uffed\027\uffed\031\uffed\033\uffed\034\uffed\042" +
    "\uffed\052\uffed\001\002\000\004\052\202\001\002\000\006" +
    "\005\ufff8\023\ufff8\001\002\000\004\002\ufffe\001\002\000" +
    "\004\006\205\001\002\000\010\020\013\021\010\022\007" +
    "\001\002\000\012\007\212\020\013\021\010\022\007\001" +
    "\002\000\004\052\146\001\002\000\006\023\147\024\211" +
    "\001\002\000\012\007\uffcc\020\uffcc\021\uffcc\022\uffcc\001" +
    "\002\000\004\024\216\001\002\000\004\052\146\001\002" +
    "\000\006\023\147\024\215\001\002\000\012\007\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\001\002\000\014\002\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\046\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\021\004\027\003\001\001\000\010\002" +
    "\013\003\011\025\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\202\003\011\025\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\020\025\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\200\001\001\000\004\006\025\001\001" +
    "\000\002\001\001\000\014\006\030\007\033\010\034\022" +
    "\036\025\035\001\001\000\010\012\176\013\046\022\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\107\001\001\000\012\006\030\010\152\022\036\025\035" +
    "\001\001\000\002\001\001\000\006\011\144\022\143\001" +
    "\001\000\002\001\001\000\004\006\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\054\013\046\016" +
    "\055\017\051\022\052\001\001\000\002\001\001\000\012" +
    "\012\054\013\046\017\123\022\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\107\001\001\000\010" +
    "\012\102\013\046\022\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\074\026\064" +
    "\001\001\000\004\023\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\063\001\001\000\014\012\054" +
    "\013\046\016\062\017\051\022\052\001\001\000\004\023" +
    "\061\001\001\000\002\001\001\000\010\012\101\013\046" +
    "\022\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\100\013\046\022" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\064\001\001\000\004\026\064\001" +
    "\001\000\004\026\064\001\001\000\002\001\001\000\012" +
    "\012\117\013\046\014\116\022\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\064\001\001\000\010\012\122\013\046\022\052\001" +
    "\001\000\002\001\001\000\004\026\064\001\001\000\002" +
    "\001\001\000\014\012\054\013\046\016\125\017\051\022" +
    "\052\001\001\000\004\023\061\001\001\000\002\001\001" +
    "\000\004\006\130\001\001\000\002\001\001\000\004\006" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\054\013\046\016\136\017\051\022" +
    "\052\001\001\000\004\023\061\001\001\000\002\001\001" +
    "\000\010\012\141\013\046\022\052\001\001\000\004\026" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\107\001\001\000\004\022\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\117\013\046\014\157\022" +
    "\052\001\001\000\010\012\155\013\046\022\052\001\001" +
    "\000\004\026\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\165\013\046\022\052\001" +
    "\001\000\004\026\064\001\001\000\014\012\054\013\046" +
    "\016\167\017\051\022\052\001\001\000\004\023\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\173" +
    "\013\046\022\052\001\001\000\004\026\064\001\001\000" +
    "\004\006\175\001\001\000\002\001\001\000\004\026\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\205" +
    "\025\206\001\001\000\004\025\212\001\001\000\006\011" +
    "\207\022\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\213\022\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title></title>");System.out.println("</head>");System.out.println("<body>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NT$0 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</body>");System.out.println("</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PART ::= struct ident left_bracket LFIELD right_bracket semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTPART ::= ident left_parenthesis LISTPARAM right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLQ ::= left_bracket SENTLIST right_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTPARAM ::= LISTPARAM comma TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= void_token 
            {
              String RESULT =null;
		RESULT = "v";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= int_token 
            {
              String RESULT =null;
		RESULT = "i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= float_token 
            {
              String RESULT =null;
		RESULT = "f";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= ID equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= ident equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= ident left_parenthesis LEXP right_parenthesis semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= return_token EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= if_token left_parenthesis LCOND right_parenthesis then_token BLQ else_token BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= for_token left_parenthesis ident equal EXP semicolon LCOND semicolon ident equal EXP right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= while_token left_parenthesis LCOND right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= do_token BLQ until_token left_parenthesis LCOND right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(opl){
case "a": System.out.println("and"); break;
case "o": System.out.println("or"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCOND ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCOND ::= not COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPL ::= or 
            {
              String RESULT =null;
		RESULT = "o";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPL ::= and 
            {
              String RESULT =null;
		RESULT = "a";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(opr){
case "lt": System.out.println("<"); break;
case "mt": System.out.println(">"); break;
case "mte": System.out.println(">="); break;
case "lte": System.out.println("<="); break;
case "de": System.out.println("=="); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPR ::= double_equal 
            {
              String RESULT =null;
		RESULT = "de";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPR ::= less_than 
            {
              String RESULT =null;
		RESULT = "lt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPR ::= more_than 
            {
              String RESULT =null;
		RESULT = "mt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPR ::= more_than_equal_to 
            {
              String RESULT =null;
		RESULT = "mte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPR ::= less_than_equal_to 
            {
              String RESULT =null;
		RESULT = "lte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LEXP ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LEXP ::= LEXP comma EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(op){
case "sa": System.out.println("+"); break;
case "ss": System.out.println("-"); break;
case "ms": System.out.println("*"); break;
case "s": System.out.println("/"); break;
case "p": System.out.println("%"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= addition_sign 
            {
              String RESULT =null;
		RESULT = "as";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= substraction_sign 
            {
              String RESULT =null;
		RESULT = "ss";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= multiplication_sign 
            {
              String RESULT =null;
		RESULT = "ms";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= slash 
            {
              String RESULT =null;
		RESULT = "s";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= percent 
            {
              String RESULT =null;
		RESULT = "p";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= ident left_parenthesis LEXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= left_parenthesis EXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= constint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= constfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= constlit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LFIELD ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ID ::= ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = "ident: "+ident1;System.out.println(s);RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ID ::= ident dot ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ident1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LID ::= LID comma ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ID ::= ident LDIM 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ident1;System.out.println(ident1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
