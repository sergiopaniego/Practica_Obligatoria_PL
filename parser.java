package practica_pl;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\027\002\000\002\021\004\000\002\002" +
    "\004\000\002\030\002\000\002\002\005\000\002\002\003" +
    "\000\002\031\002\000\002\003\005\000\002\032\002\000" +
    "\002\003\011\000\002\033\002\000\002\034\002\000\002" +
    "\004\011\000\002\035\002\000\002\006\006\000\002\036" +
    "\002\000\002\005\007\000\002\005\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\037\002\000" +
    "\002\007\005\000\002\040\002\000\002\007\004\000\002" +
    "\041\002\000\002\010\007\000\002\042\002\000\002\010" +
    "\006\000\002\043\002\000\002\010\007\000\002\044\002" +
    "\000\002\010\010\000\002\045\002\000\002\010\006\000" +
    "\002\046\002\000\002\047\002\000\002\050\002\000\002" +
    "\010\015\000\002\051\002\000\002\052\002\000\002\053" +
    "\002\000\002\054\002\000\002\010\023\000\002\055\002" +
    "\000\002\056\002\000\002\010\011\000\002\057\002\000" +
    "\002\060\002\000\002\010\012\000\002\010\003\000\002" +
    "\061\002\000\002\016\006\000\002\016\003\000\002\062" +
    "\002\000\002\016\005\000\002\023\003\000\002\023\003" +
    "\000\002\063\002\000\002\017\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\014\003\000\002\064\002\000\002\014" +
    "\006\000\002\065\002\000\002\012\006\000\002\012\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\066\002\000\002" +
    "\013\007\000\002\067\002\000\002\013\006\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\015\006\000\002\015\005\000\002\022\003\000" +
    "\002\022\005\000\002\011\003\000\002\011\005\000\002" +
    "\022\004\000\002\020\006\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\012\020\001\021\001\022\001\046\001\001" +
    "\002\000\012\020\013\021\010\022\007\046\011\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\004\052\uffed\001\002\000\004\052\uffee\001\002\000\004" +
    "\052\243\001\002\000\014\002\ufffc\020\ufffe\021\ufffe\022" +
    "\ufffe\046\ufffe\001\002\000\004\052\uffef\001\002\000\004" +
    "\002\000\001\002\000\004\052\ufffb\001\002\000\004\052" +
    "\020\001\002\000\014\002\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\046\ufffa\001\002\000\004\004\021\001\002\000\010\020" +
    "\ufff7\021\ufff7\022\ufff7\001\002\000\010\020\013\021\010" +
    "\022\007\001\002\000\006\005\027\023\026\001\002\000" +
    "\004\052\025\001\002\000\006\005\ufff0\023\ufff0\001\002" +
    "\000\010\020\ufff2\021\ufff2\022\ufff2\001\002\000\004\006" +
    "\ufff6\001\002\000\004\006\032\001\002\000\014\002\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\046\ufff5\001\002\000\026\006" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\027\ufff4\031\ufff4\033\ufff4" +
    "\034\ufff4\042\ufff4\052\ufff4\001\002\000\026\006\uffea\020" +
    "\uffea\021\uffea\022\uffea\027\uffea\031\uffea\033\uffea\034\uffea" +
    "\042\uffea\052\uffea\001\002\000\026\006\032\020\013\021" +
    "\010\022\007\027\051\031\050\033\043\034\040\042\047" +
    "\052\042\001\002\000\030\006\uffec\007\036\020\uffec\021" +
    "\uffec\022\uffec\027\uffec\031\uffec\033\uffec\034\uffec\042\uffec" +
    "\052\uffec\001\002\000\040\002\ufff3\006\ufff3\007\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\042\ufff3\046\ufff3\052\ufff3\001\002\000" +
    "\026\006\032\020\013\021\010\022\007\027\051\031\050" +
    "\033\043\034\040\042\047\052\042\001\002\000\014\004" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\052\uffe0\001\002\000\030" +
    "\006\uffcf\007\uffcf\020\uffcf\021\uffcf\022\uffcf\027\uffcf\031" +
    "\uffcf\033\uffcf\034\uffcf\042\uffcf\052\uffcf\001\002\000\012" +
    "\004\221\025\222\047\123\050\124\001\002\000\004\004" +
    "\201\001\002\000\030\006\uffeb\007\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb\042\uffeb\052" +
    "\uffeb\001\002\000\004\052\uffe6\001\002\000\004\025\166" +
    "\001\002\000\004\006\uffd2\001\002\000\004\004\145\001" +
    "\002\000\004\004\052\001\002\000\016\004\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\045\uffd5\052\uffd5\001\002\000\016\004" +
    "\061\015\056\016\054\017\064\045\055\052\060\001\002" +
    "\000\040\005\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\023\uffb0\024\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\044\uffb0\001\002\000\014\004\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\052\uffcb\001\002\000\040\005\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\023\uffb1\024" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1" +
    "\044\uffb1\001\002\000\040\005\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\023\uffbb\024\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\001\002\000" +
    "\046\004\122\005\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\023\uffab\024\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\043\uffab\044\uffab\047\123\050\124\001\002" +
    "\000\014\004\uffb3\015\uffb3\016\uffb3\017\uffb3\052\uffb3\001" +
    "\002\000\012\005\uffcc\024\uffcc\043\uffcc\044\uffcc\001\002" +
    "\000\040\005\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\023\uffae\024\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\043\uffae\044\uffae\001\002\000\040\005\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\023\uffaf\024\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044" +
    "\uffaf\001\002\000\026\010\104\011\106\012\110\013\101" +
    "\014\103\035\102\036\112\037\111\040\105\041\100\001" +
    "\002\000\010\005\070\043\067\044\071\001\002\000\016" +
    "\004\uffc8\015\uffc8\016\uffc8\017\uffc8\045\uffc8\052\uffc8\001" +
    "\002\000\004\006\uffd4\001\002\000\016\004\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\045\uffc9\052\uffc9\001\002\000\016\004" +
    "\uffce\015\uffce\016\uffce\017\uffce\045\uffce\052\uffce\001\002" +
    "\000\016\004\061\015\056\016\054\017\064\045\055\052" +
    "\060\001\002\000\012\005\uffcd\024\uffcd\043\067\044\071" +
    "\001\002\000\004\006\032\001\002\000\030\006\uffd3\007" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\027\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\042\uffd3\052\uffd3\001\002\000\014\004\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\052\uffbd\001\002\000\014\004\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\052\uffc5\001\002\000\014\004" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\052\uffb7\001\002\000\014" +
    "\004\uffc3\015\uffc3\016\uffc3\017\uffc3\052\uffc3\001\002\000" +
    "\014\004\uffb6\015\uffb6\016\uffb6\017\uffb6\052\uffb6\001\002" +
    "\000\014\004\uffba\015\uffba\016\uffba\017\uffba\052\uffba\001" +
    "\002\000\014\004\uffc2\015\uffc2\016\uffc2\017\uffc2\052\uffc2" +
    "\001\002\000\014\004\uffb9\015\uffb9\016\uffb9\017\uffb9\052" +
    "\uffb9\001\002\000\014\004\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\052\uffc7\001\002\000\014\004\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\052\uffb8\001\002\000\014\004\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\052\uffc1\001\002\000\014\004\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\052\uffc4\001\002\000\014\004\061\015\056" +
    "\016\054\017\064\052\060\001\002\000\024\005\uffc6\010" +
    "\104\011\106\012\110\013\101\014\103\024\uffc6\043\uffc6" +
    "\044\uffc6\001\002\000\014\004\061\015\056\016\054\017" +
    "\064\052\060\001\002\000\040\005\uffbc\010\104\011\106" +
    "\012\110\013\101\014\103\023\uffbc\024\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\001\002" +
    "\000\014\004\061\015\056\016\054\017\064\052\060\001" +
    "\002\000\016\005\121\010\104\011\106\012\110\013\101" +
    "\014\103\001\002\000\040\005\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\023\uffb2\024\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\001\002\000" +
    "\014\004\uffb5\015\uffb5\016\uffb5\017\uffb5\052\uffb5\001\002" +
    "\000\004\052\133\001\002\000\004\015\131\001\002\000" +
    "\044\005\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\043\uffa7\044\uffa7\050\126\001\002\000\004" +
    "\015\127\001\002\000\004\051\130\001\002\000\044\005" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\043\uffa6\044\uffa6\050\uffa6\001\002\000\004\051\132" +
    "\001\002\000\044\005\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\023\uffa5\024\uffa5\025\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\043\uffa5\044\uffa5\050\uffa5\001" +
    "\002\000\042\005\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\023\uffaa\024\uffaa\025\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\001\002\000\014" +
    "\004\061\015\056\016\054\017\064\052\060\001\002\000" +
    "\006\005\140\023\137\001\002\000\020\005\uffc0\010\104" +
    "\011\106\012\110\013\101\014\103\023\uffc0\001\002\000" +
    "\014\004\uffbf\015\uffbf\016\uffbf\017\uffbf\052\uffbf\001\002" +
    "\000\040\005\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\023\uffb4\024\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\043\uffb4\044\uffb4\001\002\000\014\004\061\015" +
    "\056\016\054\017\064\052\060\001\002\000\020\005\uffbe" +
    "\010\104\011\106\012\110\013\101\014\103\023\uffbe\001" +
    "\002\000\014\004\061\015\056\016\054\017\064\052\060" +
    "\001\002\000\012\005\uffca\024\uffca\043\uffca\044\uffca\001" +
    "\002\000\016\004\uffde\015\uffde\016\uffde\017\uffde\045\uffde" +
    "\052\uffde\001\002\000\016\004\061\015\056\016\054\017" +
    "\064\045\055\052\060\001\002\000\010\005\150\043\067" +
    "\044\071\001\002\000\004\032\151\001\002\000\004\006" +
    "\uffdd\001\002\000\004\006\032\001\002\000\004\030\154" +
    "\001\002\000\004\006\uffdc\001\002\000\004\006\032\001" +
    "\002\000\030\006\uffdb\007\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\027\uffdb\031\uffdb\033\uffdb\034\uffdb\042\uffdb\052\uffdb\001" +
    "\002\000\004\006\032\001\002\000\004\026\161\001\002" +
    "\000\004\004\162\001\002\000\016\004\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\045\uffd1\052\uffd1\001\002\000\016\004\061" +
    "\015\056\016\054\017\064\045\055\052\060\001\002\000" +
    "\010\005\165\043\067\044\071\001\002\000\030\006\uffd0" +
    "\007\uffd0\020\uffd0\021\uffd0\022\uffd0\027\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\042\uffd0\052\uffd0\001\002\000\014\004\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\052\uffe8\001\002\000\014\004" +
    "\061\015\056\016\054\017\064\052\060\001\002\000\016" +
    "\010\104\011\106\012\110\013\101\014\103\024\171\001" +
    "\002\000\030\006\uffe7\007\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\027\uffe7\031\uffe7\033\uffe7\034\uffe7\042\uffe7\052\uffe7\001" +
    "\002\000\004\052\175\001\002\000\006\023\uffa9\024\uffa9" +
    "\001\002\000\006\023\176\024\177\001\002\000\012\023" +
    "\uffab\024\uffab\047\123\050\124\001\002\000\004\052\175" +
    "\001\002\000\030\006\uffe5\007\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\042\uffe5\052\uffe5" +
    "\001\002\000\006\023\uffa8\024\uffa8\001\002\000\004\052" +
    "\202\001\002\000\004\025\203\001\002\000\014\004\uffda" +
    "\015\uffda\016\uffda\017\uffda\052\uffda\001\002\000\014\004" +
    "\061\015\056\016\054\017\064\052\060\001\002\000\016" +
    "\010\104\011\106\012\110\013\101\014\103\024\206\001" +
    "\002\000\016\004\uffd9\015\uffd9\016\uffd9\017\uffd9\045\uffd9" +
    "\052\uffd9\001\002\000\016\004\061\015\056\016\054\017" +
    "\064\045\055\052\060\001\002\000\010\024\211\043\067" +
    "\044\071\001\002\000\004\052\212\001\002\000\004\025" +
    "\213\001\002\000\014\004\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\052\uffd8\001\002\000\014\004\061\015\056\016\054\017" +
    "\064\052\060\001\002\000\016\005\216\010\104\011\106" +
    "\012\110\013\101\014\103\001\002\000\004\006\uffd7\001" +
    "\002\000\004\006\032\001\002\000\030\006\uffd6\007\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\027\uffd6\031\uffd6\033\uffd6\034" +
    "\uffd6\042\uffd6\052\uffd6\001\002\000\014\004\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\052\uffe2\001\002\000\014\004\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\052\uffe4\001\002\000\014\004\061" +
    "\015\056\016\054\017\064\052\060\001\002\000\016\010" +
    "\104\011\106\012\110\013\101\014\103\024\225\001\002" +
    "\000\030\006\uffe3\007\uffe3\020\uffe3\021\uffe3\022\uffe3\027" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\042\uffe3\052\uffe3\001\002" +
    "\000\014\004\061\015\056\016\054\017\064\052\060\001" +
    "\002\000\006\005\230\023\137\001\002\000\004\024\231" +
    "\001\002\000\030\006\uffe1\007\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\027\uffe1\031\uffe1\033\uffe1\034\uffe1\042\uffe1\052\uffe1" +
    "\001\002\000\014\004\061\015\056\016\054\017\064\052" +
    "\060\001\002\000\016\010\104\011\106\012\110\013\101" +
    "\014\103\024\234\001\002\000\030\006\uffdf\007\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\027\uffdf\031\uffdf\033\uffdf\034\uffdf" +
    "\042\uffdf\052\uffdf\001\002\000\030\006\uffe9\007\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\027\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\042\uffe9\052\uffe9\001\002\000\010\020\013\021\010\022" +
    "\007\001\002\000\004\052\240\001\002\000\006\005\ufff1" +
    "\023\ufff1\001\002\000\012\020\013\021\010\022\007\046" +
    "\011\001\002\000\004\002\ufffd\001\002\000\004\006\244" +
    "\001\002\000\010\020\ufff9\021\ufff9\022\ufff9\001\002\000" +
    "\010\020\013\021\010\022\007\001\002\000\012\007\252" +
    "\020\013\021\010\022\007\001\002\000\004\052\175\001" +
    "\002\000\006\023\176\024\251\001\002\000\012\007\uffac" +
    "\020\uffac\021\uffac\022\uffac\001\002\000\004\024\256\001" +
    "\002\000\004\052\175\001\002\000\006\023\176\024\255" +
    "\001\002\000\012\007\uffad\020\uffad\021\uffad\022\uffad\001" +
    "\002\000\014\002\ufff8\020\ufff8\021\ufff8\022\ufff8\046\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\021\004\027\003\001\001\000\010\002" +
    "\013\003\011\025\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\015\001\001\000\004\004\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\021" +
    "\001\001\000\006\005\022\025\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\235" +
    "\001\001\000\004\034\027\001\001\000\004\006\030\001" +
    "\001\000\002\001\001\000\004\035\032\001\001\000\006" +
    "\007\034\040\033\001\001\000\012\006\040\010\234\022" +
    "\045\025\044\001\001\000\004\037\036\001\001\000\002" +
    "\001\001\000\012\006\040\010\043\022\045\025\044\001" +
    "\001\000\004\045\231\001\001\000\002\001\001\000\004" +
    "\020\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\171\001\001\000\002\001\001\000\004\057\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\052\001\001\000\014\012\064\013\056\016\065\017\061" +
    "\022\062\001\001\000\002\001\001\000\004\062\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\124" +
    "\001\001\000\004\067\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\106\026\076" +
    "\001\001\000\004\023\071\001\001\000\002\001\001\000" +
    "\004\056\074\001\001\000\002\001\001\000\004\061\072" +
    "\001\001\000\014\012\064\013\056\016\073\017\061\022" +
    "\062\001\001\000\004\023\071\001\001\000\004\006\075" +
    "\001\001\000\002\001\001\000\004\065\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\113\013\056\022" +
    "\062\001\001\000\004\026\076\001\001\000\010\012\115" +
    "\013\056\022\062\001\001\000\004\026\076\001\001\000" +
    "\010\012\117\013\056\022\062\001\001\000\004\026\076" +
    "\001\001\000\002\001\001\000\004\066\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\135" +
    "\013\056\014\134\022\062\001\001\000\002\001\001\000" +
    "\004\026\076\001\001\000\004\064\140\001\001\000\002" +
    "\001\001\000\010\012\141\013\056\022\062\001\001\000" +
    "\004\026\076\001\001\000\012\012\064\013\056\017\143" +
    "\022\062\001\001\000\002\001\001\000\004\046\145\001" +
    "\001\000\014\012\064\013\056\016\146\017\061\022\062" +
    "\001\001\000\004\023\071\001\001\000\002\001\001\000" +
    "\004\047\151\001\001\000\004\006\152\001\001\000\002" +
    "\001\001\000\004\050\154\001\001\000\004\006\155\001" +
    "\001\000\002\001\001\000\004\006\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\162\001\001\000" +
    "\014\012\064\013\056\016\163\017\061\022\062\001\001" +
    "\000\004\023\071\001\001\000\002\001\001\000\004\041" +
    "\166\001\001\000\010\012\167\013\056\022\062\001\001" +
    "\000\004\026\076\001\001\000\002\001\001\000\006\011" +
    "\173\022\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\124\001\001\000\004\022\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\203\001\001\000\010\012\204\013" +
    "\056\022\062\001\001\000\004\026\076\001\001\000\004" +
    "\052\206\001\001\000\014\012\064\013\056\016\207\017" +
    "\061\022\062\001\001\000\004\023\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\213\001\001\000" +
    "\010\012\214\013\056\022\062\001\001\000\004\026\076" +
    "\001\001\000\004\054\216\001\001\000\004\006\217\001" +
    "\001\000\002\001\001\000\004\044\225\001\001\000\004" +
    "\043\222\001\001\000\010\012\223\013\056\022\062\001" +
    "\001\000\004\026\076\001\001\000\002\001\001\000\012" +
    "\012\135\013\056\014\226\022\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\232" +
    "\013\056\022\062\001\001\000\004\026\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\241\003" +
    "\011\025\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\244\001\001\000\006\015\245\025\246\001" +
    "\001\000\004\025\252\001\001\000\006\011\247\022\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\253\022\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title></title>");System.out.println("<style>.cte {color:rgb(19,189,72);}.ident {color:rgb(55,40,244);}.palres {color:rgb(0,0,0);font-weight:bold;}</style>");System.out.println("</head>");System.out.println("<body>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NT$0 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</body>");System.out.println("</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("<A HREF=\"#intercambio\">Comienzo de la función</A>");
    System.out.println("<A HREF=\"#inicio\">Comienzo de la página</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PART NT$1 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAM ::= PART 
            {
              Object RESULT =null;
		System.out.println("<A HREF=\"#intercambio\">Comienzo de la función</A>");
    System.out.println("<A HREF=\"#inicio\">Comienzo de la página</A>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("<hr/>");
    System.out.println("<A NAME=\"intercambio\">");System.out.println("<code>");System.out.print("<SPAN CLASS=\"palres\">");switch(type){
    case "v": System.out.print("void </SPAN>"); break;
    case "i": System.out.print("int </SPAN>"); break;
    case "f": System.out.print("float </SPAN>"); break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PART ::= TYPE NT$2 RESTPART 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("</code>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.println("struct <SPAN CLASS=\"ident\"> "+ident1+"</SPAN> {");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PART ::= struct ident left_bracket NT$3 LFIELD right_bracket semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		System.out.println("};");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.println(")<BR/>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RESTPART ::= ident left_parenthesis NT$4 LISTPARAM right_parenthesis NT$5 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
System.out.println("{");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLQ ::= left_bracket NT$6 SENTLIST right_bracket 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("}<BR/>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =null;
System.out.print(", ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAM ::= LISTPARAM comma NT$7 TYPE ident 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print("<SPAN CLASS=\"palres\">");switch(type){
case "v": System.out.print("void </SPAN>"); break;
case "i": System.out.print("int </SPAN>"); break;
case "f": System.out.print("float </SPAN>"); break;
};System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print("<SPAN CLASS=\"palres\">");switch(type){
case "v": System.out.print("void </SPAN>"); break;
case "i": System.out.print("int </SPAN>"); break;
case "f": System.out.print("float </SPAN>"); break;
}; System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= void_token 
            {
              String RESULT =null;
		RESULT = "v";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= int_token 
            {
              String RESULT =null;
		RESULT = "i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= float_token 
            {
              String RESULT =null;
		RESULT = "f";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
System.out.print("<DIV style=\"text-indent: .5cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTLIST ::= SENTLIST NT$8 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</DIV>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
System.out.print("<DIV style=\"text-indent: .5cm\">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTLIST ::= NT$9 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</DIV>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= ID equal NT$10 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.print(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(type){
case "v": System.out.print("<SPAN CLASS=\"palres\">void</SPAN>  "); break;
case "i": System.out.print("<SPAN CLASS=\"palres\">int</SPAN> "); break;
case "f": System.out.print("<SPAN CLASS=\"palres\">float</SPAN> "); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT ::= TYPE NT$11 LID semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$12 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT ::= ident equal NT$12 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.print(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$13 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT ::= ident left_parenthesis NT$13 LEXP right_parenthesis semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		System.out.print(");");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$14 ::= 
            {
              Object RESULT =null;
System.out.print("<SPAN CLASS=\"palres\">return</SPAN> ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= return_token NT$14 EXP semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$15 ::= 
            {
              Object RESULT =null;
System.out.print("if (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
System.out.print(") then");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
System.out.print("else");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= if_token left_parenthesis NT$15 LCOND right_parenthesis then_token NT$16 BLQ else_token NT$17 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$18 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("for("+"<SPAN CLASS=\"ident\">"+ident1+ "</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.print(";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("; <SPAN CLASS=\"ident\">"+ident2+"</SPAN> = ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= for_token left_parenthesis ident equal NT$18 EXP semicolon NT$19 LCOND semicolon ident equal NT$20 EXP right_parenthesis NT$21 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$22 ::= 
            {
              Object RESULT =null;
System.out.print("while (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= while_token left_parenthesis NT$22 LCOND right_parenthesis NT$23 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$24 ::= 
            {
              Object RESULT =null;
System.out.print("do ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
System.out.print("until (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT ::= do_token NT$24 BLQ until_token left_parenthesis NT$25 LCOND right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$26 ::= 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(opl){
case "a": System.out.print(" and "); break;
case "o": System.out.print(" or "); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LCOND ::= LCOND OPL NT$26 LCOND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LCOND ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$27 ::= 
            {
              Object RESULT =null;
System.out.print(" not ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LCOND ::= not NT$27 COND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPL ::= or 
            {
              String RESULT =null;
		RESULT = "o";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPL ::= and 
            {
              String RESULT =null;
		RESULT = "a";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$28 ::= 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(opr){
case "lt": System.out.print(" < "); break;
case "mt": System.out.print(" > "); break;
case "mte": System.out.print(" >= "); break;
case "lte": System.out.print(" <= "); break;
case "de": System.out.print(" == "); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND ::= EXP OPR NT$28 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPR ::= double_equal 
            {
              String RESULT =null;
		RESULT = "de";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPR ::= less_than 
            {
              String RESULT =null;
		RESULT = "lt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPR ::= more_than 
            {
              String RESULT =null;
		RESULT = "mt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPR ::= more_than_equal_to 
            {
              String RESULT =null;
		RESULT = "mte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPR ::= less_than_equal_to 
            {
              String RESULT =null;
		RESULT = "lte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LEXP ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$29 ::= 
            {
              Object RESULT =null;
System.out.print(", ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LEXP ::= LEXP comma NT$29 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$30 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
switch(op){
case "as": System.out.print(" + "); break;
case "ss": System.out.print(" - "); break;
case "ms": System.out.print(" * "); break;
case "s": System.out.print(" / "); break;
case "p": System.out.print(" % "); break;
}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP OP NT$30 EXP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= addition_sign 
            {
              String RESULT =null;
		RESULT = "as";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= substraction_sign 
            {
              String RESULT =null;
		RESULT = "ss";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= multiplication_sign 
            {
              String RESULT =null;
		RESULT = "ms";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= slash 
            {
              String RESULT =null;
		RESULT = "s";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= percent 
            {
              String RESULT =null;
		RESULT = "p";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$31 ::= 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
System.out.print("<SPAN CLASS=\"ident\">"+ident1 +"</SPAN> (");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FACTOR ::= ident left_parenthesis NT$31 LEXP right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$32 ::= 
            {
              Object RESULT =null;
System.out.print("(");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FACTOR ::= left_parenthesis NT$32 EXP right_parenthesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FACTOR ::= constint 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FACTOR ::= constfloat 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FACTOR ::= constlit 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(const1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FACTOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.print(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LFIELD ::= TYPE LID semicolon 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ID ::= ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ID ::= ident dot ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>.<SPAN CLASS=\"ident\">"+ident2+"</SPAN>";RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LID ::= ID 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LID ::= LID comma ID 
            {
              Object RESULT =null;
		int lid1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lid1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lid1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = lid1+"</SPAN> , <SPAN CLASS=\"ident\">"+id1; RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ID ::= ident LDIM 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ldim1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>"+ldim1;RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;
		int ldim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ldim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ldim1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String s = ldim1+"["+const1+"]";RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String s = "["+const1+"]";RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
