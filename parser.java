
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\027\002\000\002\026\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\004" +
    "\000\002\003\010\000\002\005\007\000\002\007\005\000" +
    "\002\006\006\000\002\006\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\010\004\000\002\010" +
    "\003\000\002\011\006\000\002\011\005\000\002\011\006" +
    "\000\002\011\007\000\002\011\005\000\002\011\012\000" +
    "\002\011\017\000\002\011\007\000\002\011\010\000\002" +
    "\011\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\004\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\016\003\000\002" +
    "\016\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\006\000\002\015\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\017\006\000\002\017\005\000\002\024" +
    "\003\000\002\024\005\000\002\012\003\000\002\012\005" +
    "\000\002\024\004\000\002\025\006\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\012\021\001\022\001\023\001\047\001\001" +
    "\002\000\012\021\013\022\010\023\007\047\011\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\004\004\ufff4\001\002\000\004\004\ufff5\001\002\000\004" +
    "\004\204\001\002\000\014\002\ufffd\021\013\022\010\023" +
    "\007\047\011\001\002\000\004\004\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\004\017\001\002\000\014\002" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\047\ufffc\001\002\000\004" +
    "\005\020\001\002\000\010\021\013\022\010\023\007\001" +
    "\002\000\006\006\025\024\024\001\002\000\004\004\023" +
    "\001\002\000\006\006\ufff7\024\ufff7\001\002\000\010\021" +
    "\013\022\010\023\007\001\002\000\004\007\027\001\002" +
    "\000\014\002\ufffa\021\ufffa\022\ufffa\023\ufffa\047\ufffa\001" +
    "\002\000\026\004\033\007\027\021\013\022\010\023\007" +
    "\030\042\032\041\034\032\035\030\043\040\001\002\000" +
    "\014\004\050\005\051\016\046\017\044\020\054\001\002" +
    "\000\030\004\uffe8\007\uffe8\010\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\030\uffe8\032\uffe8\034\uffe8\035\uffe8\043\uffe8\001\002" +
    "\000\004\005\163\001\002\000\012\005\154\026\155\050" +
    "\106\051\107\001\002\000\030\004\033\007\027\010\152" +
    "\021\013\022\010\023\007\030\042\032\041\034\032\035" +
    "\030\043\040\001\002\000\030\004\ufff2\007\ufff2\010\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\030\ufff2\032\ufff2\034\ufff2\035" +
    "\ufff2\043\ufff2\001\002\000\004\004\146\001\002\000\004" +
    "\026\141\001\002\000\004\007\027\001\002\000\004\005" +
    "\125\001\002\000\004\005\043\001\002\000\016\004\050" +
    "\005\051\016\046\017\044\020\054\046\045\001\002\000" +
    "\040\006\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\024\uffd0\025\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\044\uffd0\045\uffd0\001\002\000\014\004\050\005\051" +
    "\016\046\017\044\020\054\001\002\000\040\006\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\024\uffd1\025\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\045" +
    "\uffd1\001\002\000\040\006\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\024\uffd9\025\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9\001\002\000\046" +
    "\005\105\006\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\024\uffcb\025\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\044\uffcb\045\uffcb\050\106\051\107\001\002\000" +
    "\014\004\050\005\051\016\046\017\044\020\054\001\002" +
    "\000\012\006\uffe6\025\uffe6\044\uffe6\045\uffe6\001\002\000" +
    "\040\006\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\024\uffce\025\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\044\uffce\045\uffce\001\002\000\040\006\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\024\uffcf\025\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf" +
    "\001\002\000\026\011\073\012\074\013\076\014\067\015" +
    "\071\036\070\037\100\040\077\041\072\042\066\001\002" +
    "\000\010\006\061\044\057\045\060\001\002\000\016\004" +
    "\uffe3\005\uffe3\016\uffe3\017\uffe3\020\uffe3\046\uffe3\001\002" +
    "\000\016\004\uffe4\005\uffe4\016\uffe4\017\uffe4\020\uffe4\046" +
    "\uffe4\001\002\000\004\007\027\001\002\000\016\004\050" +
    "\005\051\016\046\017\044\020\054\046\045\001\002\000" +
    "\012\006\uffe7\025\uffe7\044\057\045\060\001\002\000\030" +
    "\004\uffea\007\uffea\010\uffea\021\uffea\022\uffea\023\uffea\030" +
    "\uffea\032\uffea\034\uffea\035\uffea\043\uffea\001\002\000\014" +
    "\004\050\005\051\016\046\017\044\020\054\001\002\000" +
    "\014\004\uffe1\005\uffe1\016\uffe1\017\uffe1\020\uffe1\001\002" +
    "\000\014\004\uffd5\005\uffd5\016\uffd5\017\uffd5\020\uffd5\001" +
    "\002\000\014\004\uffdf\005\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\001\002\000\014\004\uffd4\005\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\001\002\000\014\004\uffde\005\uffde\016\uffde\017\uffde" +
    "\020\uffde\001\002\000\014\004\uffd8\005\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\001\002\000\014\004\uffd7\005\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\001\002\000\014\004\050\005\051\016" +
    "\046\017\044\020\054\001\002\000\014\004\uffd6\005\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\001\002\000\014\004\uffdd\005" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\001\002\000\014\004\uffe0" +
    "\005\uffe0\016\uffe0\017\uffe0\020\uffe0\001\002\000\024\006" +
    "\uffe2\011\073\012\074\013\076\014\067\015\071\025\uffe2" +
    "\044\uffe2\045\uffe2\001\002\000\040\006\uffda\011\073\012" +
    "\074\013\076\014\067\015\071\024\uffda\025\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\044\uffda\045\uffda\001" +
    "\002\000\016\006\104\011\073\012\074\013\076\014\067" +
    "\015\071\001\002\000\040\006\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\024\uffd2\025\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\001\002\000" +
    "\014\004\050\005\051\016\046\017\044\020\054\001\002" +
    "\000\004\004\116\001\002\000\004\016\114\001\002\000" +
    "\044\006\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\044\uffc7\045\uffc7\051\111\001\002\000\004" +
    "\016\112\001\002\000\004\052\113\001\002\000\044\006" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\044\uffc6\045\uffc6\051\uffc6\001\002\000\004\052\115" +
    "\001\002\000\044\006\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\024\uffc5\025\uffc5\026\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\051\uffc5\001" +
    "\002\000\042\006\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\024\uffca\025\uffca\026\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\044\uffca\045\uffca\001\002\000\006" +
    "\006\122\024\121\001\002\000\020\006\uffdc\011\073\012" +
    "\074\013\076\014\067\015\071\024\uffdc\001\002\000\014" +
    "\004\050\005\051\016\046\017\044\020\054\001\002\000" +
    "\040\006\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\024\uffd3\025\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\001\002\000\020\006\uffdb\011\073" +
    "\012\074\013\076\014\067\015\071\024\uffdb\001\002\000" +
    "\012\006\uffe5\025\uffe5\044\uffe5\045\uffe5\001\002\000\016" +
    "\004\050\005\051\016\046\017\044\020\054\046\045\001" +
    "\002\000\010\006\127\044\057\045\060\001\002\000\004" +
    "\033\130\001\002\000\004\007\027\001\002\000\004\031" +
    "\132\001\002\000\004\007\027\001\002\000\030\004\uffec" +
    "\007\uffec\010\uffec\021\uffec\022\uffec\023\uffec\030\uffec\032" +
    "\uffec\034\uffec\035\uffec\043\uffec\001\002\000\004\027\135" +
    "\001\002\000\004\005\136\001\002\000\016\004\050\005" +
    "\051\016\046\017\044\020\054\046\045\001\002\000\010" +
    "\006\140\044\057\045\060\001\002\000\030\004\uffe9\007" +
    "\uffe9\010\uffe9\021\uffe9\022\uffe9\023\uffe9\030\uffe9\032\uffe9" +
    "\034\uffe9\035\uffe9\043\uffe9\001\002\000\014\004\050\005" +
    "\051\016\046\017\044\020\054\001\002\000\016\011\073" +
    "\012\074\013\076\014\067\015\071\025\143\001\002\000" +
    "\030\004\ufff1\007\ufff1\010\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\030\ufff1\032\ufff1\034\ufff1\035\ufff1\043\ufff1\001\002\000" +
    "\006\024\uffc9\025\uffc9\001\002\000\006\024\147\025\150" +
    "\001\002\000\012\024\uffcb\025\uffcb\050\106\051\107\001" +
    "\002\000\004\004\146\001\002\000\030\004\ufff0\007\ufff0" +
    "\010\ufff0\021\ufff0\022\ufff0\023\ufff0\030\ufff0\032\ufff0\034" +
    "\ufff0\035\ufff0\043\ufff0\001\002\000\006\024\uffc8\025\uffc8" +
    "\001\002\000\040\002\ufff9\004\ufff9\007\ufff9\010\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\034\ufff9\035\ufff9\043\ufff9\047\ufff9\001\002\000\030\004" +
    "\ufff3\007\ufff3\010\ufff3\021\ufff3\022\ufff3\023\ufff3\030\ufff3" +
    "\032\ufff3\034\ufff3\035\ufff3\043\ufff3\001\002\000\014\004" +
    "\050\005\051\016\046\017\044\020\054\001\002\000\014" +
    "\004\050\005\051\016\046\017\044\020\054\001\002\000" +
    "\016\011\073\012\074\013\076\014\067\015\071\025\157" +
    "\001\002\000\030\004\uffef\007\uffef\010\uffef\021\uffef\022" +
    "\uffef\023\uffef\030\uffef\032\uffef\034\uffef\035\uffef\043\uffef" +
    "\001\002\000\006\006\161\024\121\001\002\000\004\025" +
    "\162\001\002\000\030\004\uffee\007\uffee\010\uffee\021\uffee" +
    "\022\uffee\023\uffee\030\uffee\032\uffee\034\uffee\035\uffee\043" +
    "\uffee\001\002\000\004\004\164\001\002\000\004\026\165" +
    "\001\002\000\014\004\050\005\051\016\046\017\044\020" +
    "\054\001\002\000\016\011\073\012\074\013\076\014\067" +
    "\015\071\025\167\001\002\000\016\004\050\005\051\016" +
    "\046\017\044\020\054\046\045\001\002\000\010\025\171" +
    "\044\057\045\060\001\002\000\004\004\172\001\002\000" +
    "\004\026\173\001\002\000\014\004\050\005\051\016\046" +
    "\017\044\020\054\001\002\000\016\006\175\011\073\012" +
    "\074\013\076\014\067\015\071\001\002\000\004\007\027" +
    "\001\002\000\030\004\uffeb\007\uffeb\010\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\030\uffeb\032\uffeb\034\uffeb\035\uffeb\043\uffeb" +
    "\001\002\000\016\011\073\012\074\013\076\014\067\015" +
    "\071\025\200\001\002\000\030\004\uffed\007\uffed\010\uffed" +
    "\021\uffed\022\uffed\023\uffed\030\uffed\032\uffed\034\uffed\035" +
    "\uffed\043\uffed\001\002\000\004\004\202\001\002\000\006" +
    "\006\ufff8\024\ufff8\001\002\000\004\002\ufffe\001\002\000" +
    "\004\007\205\001\002\000\010\021\013\022\010\023\007" +
    "\001\002\000\012\010\212\021\013\022\010\023\007\001" +
    "\002\000\004\004\146\001\002\000\006\024\147\025\211" +
    "\001\002\000\012\010\uffcc\021\uffcc\022\uffcc\023\uffcc\001" +
    "\002\000\004\025\216\001\002\000\004\004\146\001\002" +
    "\000\006\024\147\025\215\001\002\000\012\010\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\001\002\000\014\002\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\047\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\026\004\027\003\001\001\000\010\002" +
    "\013\003\011\004\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\202\003\011\004\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\021\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\200\001\001\000\004\007\025\001\001" +
    "\000\002\001\001\000\014\004\035\007\030\010\033\011" +
    "\034\024\036\001\001\000\010\013\176\015\046\024\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\107\001\001\000\012\004\035\007\030\011\152\024\036" +
    "\001\001\000\002\001\001\000\006\012\144\024\143\001" +
    "\001\000\002\001\001\000\004\007\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\054\015\046\020" +
    "\055\022\051\024\052\001\001\000\002\001\001\000\012" +
    "\013\054\015\046\022\123\024\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\107\001\001\000\010" +
    "\013\102\015\046\024\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\064\023\074" +
    "\001\001\000\004\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\063\001\001\000\014\013\054" +
    "\015\046\020\062\022\051\024\052\001\001\000\004\021" +
    "\061\001\001\000\002\001\001\000\010\013\101\015\046" +
    "\024\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\100\015\046\024" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\064\001\001\000\004\014\064\001" +
    "\001\000\004\014\064\001\001\000\002\001\001\000\012" +
    "\013\117\015\046\016\116\024\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\064\001\001\000\010\013\122\015\046\024\052\001" +
    "\001\000\002\001\001\000\004\014\064\001\001\000\002" +
    "\001\001\000\014\013\054\015\046\020\125\022\051\024" +
    "\052\001\001\000\004\021\061\001\001\000\002\001\001" +
    "\000\004\007\130\001\001\000\002\001\001\000\004\007" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\054\015\046\020\136\022\051\024" +
    "\052\001\001\000\004\021\061\001\001\000\002\001\001" +
    "\000\010\013\141\015\046\024\052\001\001\000\004\014" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\107\001\001\000\004\024\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\117\015\046\016\157\024" +
    "\052\001\001\000\010\013\155\015\046\024\052\001\001" +
    "\000\004\014\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\165\015\046\024\052\001" +
    "\001\000\004\014\064\001\001\000\014\013\054\015\046" +
    "\020\167\022\051\024\052\001\001\000\004\021\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\173" +
    "\015\046\024\052\001\001\000\004\014\064\001\001\000" +
    "\004\007\175\001\001\000\002\001\001\000\004\014\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\206" +
    "\017\205\001\001\000\004\004\212\001\001\000\006\012" +
    "\207\024\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\213\024\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title></title>");System.out.println("</head>");System.out.println("<body>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NT$0 PROGRAM 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("</body>");System.out.println("</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PART ::= struct ident left_bracket LFIELD right_bracket semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RESTPART ::= ident left_parenthesis LISTPARAM right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLQ ::= left_bracket SENTLIST right_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTPARAM ::= LISTPARAM comma TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) type){
case "v": System.out.println("void"); break;
case "i": System.out.println("int"); break;
case "f": System.out.println("float"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= void_token 
            {
              Object RESULT =null;
		RESULT = "v";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TYPE ::= int_token 
            {
              Object RESULT =null;
		RESULT = "i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TYPE ::= float_token 
            {
              Object RESULT =null;
		RESULT = "f";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= ID equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= ident equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= ident left_parenthesis LEXP right_parenthesis semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= return_token EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= if_token left_parenthesis LCOND right_parenthesis then_token BLQ else_token BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= for_token left_parenthesis ident equal EXP semicolon LCOND semicolon ident equal EXP right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= while_token left_parenthesis LCOND right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= do_token BLQ until_token left_parenthesis LCOND right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) opl){
case "a": System.out.println("and"); break;
case "o": System.out.println("or"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCOND ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCOND ::= not COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPL ::= or 
            {
              Object RESULT =null;
		RESULT = "o";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPL ::= and 
            {
              Object RESULT =null;
		RESULT = "a";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) opr){
case "lt": System.out.println("<"); break;
case "mt": System.out.println(">"); break;
case "mte": System.out.println(">="); break;
case "lte": System.out.println("<="); break;
case "de": System.out.println("=="); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPR ::= double_equal 
            {
              Object RESULT =null;
		RESULT = "de";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPR ::= less_than 
            {
              Object RESULT =null;
		RESULT = "lt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPR ::= more_than 
            {
              Object RESULT =null;
		RESULT = "mt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPR ::= more_than_equal_to 
            {
              Object RESULT =null;
		RESULT = "mte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPR ::= less_than_equal_to 
            {
              Object RESULT =null;
		RESULT = "lte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LEXP ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LEXP ::= LEXP comma EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		switch((String) op){
case "sa": System.out.println("+"); break;
case "ss": System.out.println("-"); break;
case "ms": System.out.println("*"); break;
case "s": System.out.println("/"); break;
case "p": System.out.println("%"); break;
};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= addition_sign 
            {
              Object RESULT =null;
		RESULT = "as";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= substraction_sign 
            {
              Object RESULT =null;
		RESULT = "ss";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= multiplication_sign 
            {
              Object RESULT =null;
		RESULT = "ms";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= slash 
            {
              Object RESULT =null;
		RESULT = "s";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= percent 
            {
              Object RESULT =null;
		RESULT = "p";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= ident left_parenthesis LEXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= left_parenthesis EXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= constint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= constfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FACTOR ::= constlit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LFIELD ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ID ::= ident 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1=(String) ident1; System.out.println(v1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ID ::= ident dot ident 
            {
              Object RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ident1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String v1=(String)ident1; String v2=(String)ident2; System.out.println(v1); System.out.println(v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LID ::= LID comma ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ID ::= ident LDIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
