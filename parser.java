package practica_pl;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\027\002\000\002\016\004\000\002\002" +
    "\004\000\002\026\004\000\002\026\003\000\002\030\002" +
    "\000\002\025\005\000\002\031\002\000\002\025\011\000" +
    "\002\032\002\000\002\033\002\000\002\002\011\000\002" +
    "\034\002\000\002\004\006\000\002\035\002\000\002\003" +
    "\007\000\002\003\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\036\002\000\002\005\005\000" +
    "\002\037\002\000\002\005\004\000\002\040\002\000\002" +
    "\006\007\000\002\041\002\000\002\006\006\000\002\042" +
    "\002\000\002\006\007\000\002\043\002\000\002\006\010" +
    "\000\002\044\002\000\002\006\006\000\002\045\002\000" +
    "\002\046\002\000\002\047\002\000\002\006\015\000\002" +
    "\050\002\000\002\051\002\000\002\052\002\000\002\053" +
    "\002\000\002\006\023\000\002\054\002\000\002\055\002" +
    "\000\002\006\011\000\002\056\002\000\002\057\002\000" +
    "\002\006\012\000\002\006\003\000\002\060\002\000\002" +
    "\013\006\000\002\013\003\000\002\061\002\000\002\013" +
    "\005\000\002\020\003\000\002\020\003\000\002\062\002" +
    "\000\002\014\006\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\011\003\000\002\063\002\000\002\011\006\000\002\064" +
    "\002\000\002\024\006\000\002\024\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\065\002\000\002\010\007\000\002" +
    "\066\002\000\002\010\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\012\006" +
    "\000\002\012\005\000\002\017\003\000\002\017\005\000" +
    "\002\007\003\000\002\007\005\000\002\017\004\000\002" +
    "\015\006\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\012\020\001\021\001\022\001\046\001\001" +
    "\002\000\012\020\013\021\010\022\007\046\012\001\002" +
    "\000\004\002\006\001\002\000\004\002\uffff\001\002\000" +
    "\004\052\uffee\001\002\000\004\052\uffef\001\002\000\014" +
    "\002\ufffd\020\013\021\010\022\007\046\012\001\002\000" +
    "\004\052\241\001\002\000\004\052\ufff0\001\002\000\004" +
    "\052\ufffc\001\002\000\004\002\000\001\002\000\004\052" +
    "\020\001\002\000\014\002\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\046\ufffb\001\002\000\004\004\021\001\002\000\010\020" +
    "\ufff8\021\ufff8\022\ufff8\001\002\000\010\020\013\021\010" +
    "\022\007\001\002\000\006\005\027\023\026\001\002\000" +
    "\004\052\025\001\002\000\006\005\ufff1\023\ufff1\001\002" +
    "\000\010\020\ufff3\021\ufff3\022\ufff3\001\002\000\004\006" +
    "\ufff7\001\002\000\004\006\032\001\002\000\014\002\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\046\ufff6\001\002\000\026\006" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\027\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\042\ufff5\052\ufff5\001\002\000\026\006\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\027\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\042\uffeb\052\uffeb\001\002\000\026\006\032\020\013\021" +
    "\010\022\007\027\051\031\050\033\042\034\041\042\047" +
    "\052\043\001\002\000\030\006\uffed\007\036\020\uffed\021" +
    "\uffed\022\uffed\027\uffed\031\uffed\033\uffed\034\uffed\042\uffed" +
    "\052\uffed\001\002\000\040\002\ufff4\006\ufff4\007\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\042\ufff4\046\ufff4\052\ufff4\001\002\000" +
    "\026\006\032\020\013\021\010\022\007\027\051\031\050" +
    "\033\042\034\041\042\047\052\043\001\002\000\030\006" +
    "\uffd0\007\uffd0\020\uffd0\021\uffd0\022\uffd0\027\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\042\uffd0\052\uffd0\001\002\000\014\004" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\052\uffe1\001\002\000\004" +
    "\004\212\001\002\000\012\004\201\025\202\047\123\050" +
    "\124\001\002\000\030\006\uffec\007\uffec\020\uffec\021\uffec" +
    "\022\uffec\027\uffec\031\uffec\033\uffec\034\uffec\042\uffec\052" +
    "\uffec\001\002\000\004\052\uffe7\001\002\000\004\025\166" +
    "\001\002\000\004\006\uffd3\001\002\000\004\004\145\001" +
    "\002\000\004\004\052\001\002\000\016\004\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\045\uffd6\052\uffd6\001\002\000\016\004" +
    "\061\015\057\016\054\017\064\045\055\052\060\001\002" +
    "\000\040\005\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\023\uffb1\024\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\043\uffb1\044\uffb1\001\002\000\014\004\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\052\uffcc\001\002\000\040\005\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\023\uffbc\024" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\044\uffbc\001\002\000\040\005\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\023\uffb2\024\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\001\002\000" +
    "\046\004\122\005\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\023\uffac\024\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\043\uffac\044\uffac\047\123\050\124\001\002" +
    "\000\014\004\uffb4\015\uffb4\016\uffb4\017\uffb4\052\uffb4\001" +
    "\002\000\012\005\uffcd\024\uffcd\043\uffcd\044\uffcd\001\002" +
    "\000\040\005\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\023\uffaf\024\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\043\uffaf\044\uffaf\001\002\000\040\005\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\023\uffb0\024\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044" +
    "\uffb0\001\002\000\026\010\104\011\106\012\107\013\101" +
    "\014\103\035\102\036\112\037\111\040\105\041\100\001" +
    "\002\000\010\005\071\043\067\044\070\001\002\000\016" +
    "\004\uffc9\015\uffc9\016\uffc9\017\uffc9\045\uffc9\052\uffc9\001" +
    "\002\000\016\004\uffca\015\uffca\016\uffca\017\uffca\045\uffca" +
    "\052\uffca\001\002\000\004\006\uffd5\001\002\000\016\004" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\045\uffcf\052\uffcf\001\002" +
    "\000\016\004\061\015\057\016\054\017\064\045\055\052" +
    "\060\001\002\000\012\005\uffce\024\uffce\043\067\044\070" +
    "\001\002\000\004\006\032\001\002\000\030\006\uffd4\007" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\027\uffd4\031\uffd4\033\uffd4" +
    "\034\uffd4\042\uffd4\052\uffd4\001\002\000\014\004\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\052\uffbe\001\002\000\014\004\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\052\uffc6\001\002\000\014\004" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\052\uffb8\001\002\000\014" +
    "\004\uffc4\015\uffc4\016\uffc4\017\uffc4\052\uffc4\001\002\000" +
    "\014\004\uffb7\015\uffb7\016\uffb7\017\uffb7\052\uffb7\001\002" +
    "\000\014\004\uffbb\015\uffbb\016\uffbb\017\uffbb\052\uffbb\001" +
    "\002\000\014\004\uffc3\015\uffc3\016\uffc3\017\uffc3\052\uffc3" +
    "\001\002\000\014\004\uffba\015\uffba\016\uffba\017\uffba\052" +
    "\uffba\001\002\000\014\004\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\052\uffb9\001\002\000\014\004\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\052\uffc8\001\002\000\014\004\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\052\uffc2\001\002\000\014\004\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\052\uffc5\001\002\000\014\004\061\015\057" +
    "\016\054\017\064\052\060\001\002\000\024\005\uffc7\010" +
    "\104\011\106\012\107\013\101\014\103\024\uffc7\043\uffc7" +
    "\044\uffc7\001\002\000\014\004\061\015\057\016\054\017" +
    "\064\052\060\001\002\000\040\005\uffbd\010\104\011\106" +
    "\012\107\013\101\014\103\023\uffbd\024\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd\001\002" +
    "\000\014\004\061\015\057\016\054\017\064\052\060\001" +
    "\002\000\016\005\121\010\104\011\106\012\107\013\101" +
    "\014\103\001\002\000\040\005\uffb3\010\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\023\uffb3\024\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\001\002\000" +
    "\014\004\uffb6\015\uffb6\016\uffb6\017\uffb6\052\uffb6\001\002" +
    "\000\004\052\133\001\002\000\004\015\131\001\002\000" +
    "\044\005\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\043\uffa8\044\uffa8\050\126\001\002\000\004" +
    "\015\127\001\002\000\004\051\130\001\002\000\044\005" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\043\uffa7\044\uffa7\050\uffa7\001\002\000\004\051\132" +
    "\001\002\000\044\005\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\023\uffa6\024\uffa6\025\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\050\uffa6\001" +
    "\002\000\042\005\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\023\uffab\024\uffab\025\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\043\uffab\044\uffab\001\002\000\014" +
    "\004\061\015\057\016\054\017\064\052\060\001\002\000" +
    "\006\005\140\023\137\001\002\000\020\005\uffc1\010\104" +
    "\011\106\012\107\013\101\014\103\023\uffc1\001\002\000" +
    "\014\004\uffc0\015\uffc0\016\uffc0\017\uffc0\052\uffc0\001\002" +
    "\000\040\005\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\023\uffb5\024\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\043\uffb5\044\uffb5\001\002\000\014\004\061\015" +
    "\057\016\054\017\064\052\060\001\002\000\020\005\uffbf" +
    "\010\104\011\106\012\107\013\101\014\103\023\uffbf\001" +
    "\002\000\014\004\061\015\057\016\054\017\064\052\060" +
    "\001\002\000\012\005\uffcb\024\uffcb\043\uffcb\044\uffcb\001" +
    "\002\000\016\004\uffdf\015\uffdf\016\uffdf\017\uffdf\045\uffdf" +
    "\052\uffdf\001\002\000\016\004\061\015\057\016\054\017" +
    "\064\045\055\052\060\001\002\000\010\005\150\043\067" +
    "\044\070\001\002\000\004\032\151\001\002\000\004\006" +
    "\uffde\001\002\000\004\006\032\001\002\000\004\030\154" +
    "\001\002\000\004\006\uffdd\001\002\000\004\006\032\001" +
    "\002\000\030\006\uffdc\007\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\027\uffdc\031\uffdc\033\uffdc\034\uffdc\042\uffdc\052\uffdc\001" +
    "\002\000\004\006\032\001\002\000\004\026\161\001\002" +
    "\000\004\004\162\001\002\000\016\004\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\045\uffd2\052\uffd2\001\002\000\016\004\061" +
    "\015\057\016\054\017\064\045\055\052\060\001\002\000" +
    "\010\005\165\043\067\044\070\001\002\000\030\006\uffd1" +
    "\007\uffd1\020\uffd1\021\uffd1\022\uffd1\027\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\042\uffd1\052\uffd1\001\002\000\014\004\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\052\uffe9\001\002\000\014\004" +
    "\061\015\057\016\054\017\064\052\060\001\002\000\016" +
    "\010\104\011\106\012\107\013\101\014\103\024\171\001" +
    "\002\000\030\006\uffe8\007\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\027\uffe8\031\uffe8\033\uffe8\034\uffe8\042\uffe8\052\uffe8\001" +
    "\002\000\004\052\175\001\002\000\006\023\uffaa\024\uffaa" +
    "\001\002\000\006\023\176\024\177\001\002\000\012\023" +
    "\uffac\024\uffac\047\123\050\124\001\002\000\004\052\175" +
    "\001\002\000\030\006\uffe6\007\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\027\uffe6\031\uffe6\033\uffe6\034\uffe6\042\uffe6\052\uffe6" +
    "\001\002\000\006\023\uffa9\024\uffa9\001\002\000\014\004" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\052\uffe3\001\002\000\014" +
    "\004\uffe5\015\uffe5\016\uffe5\017\uffe5\052\uffe5\001\002\000" +
    "\014\004\061\015\057\016\054\017\064\052\060\001\002" +
    "\000\016\010\104\011\106\012\107\013\101\014\103\024" +
    "\205\001\002\000\030\006\uffe4\007\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4\042\uffe4\052" +
    "\uffe4\001\002\000\014\004\061\015\057\016\054\017\064" +
    "\052\060\001\002\000\006\005\210\023\137\001\002\000" +
    "\004\024\211\001\002\000\030\006\uffe2\007\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\027\uffe2\031\uffe2\033\uffe2\034\uffe2\042" +
    "\uffe2\052\uffe2\001\002\000\004\052\213\001\002\000\004" +
    "\025\214\001\002\000\014\004\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\052\uffdb\001\002\000\014\004\061\015\057\016\054" +
    "\017\064\052\060\001\002\000\016\010\104\011\106\012" +
    "\107\013\101\014\103\024\217\001\002\000\016\004\uffda" +
    "\015\uffda\016\uffda\017\uffda\045\uffda\052\uffda\001\002\000" +
    "\016\004\061\015\057\016\054\017\064\045\055\052\060" +
    "\001\002\000\010\024\222\043\067\044\070\001\002\000" +
    "\004\052\223\001\002\000\004\025\224\001\002\000\014" +
    "\004\uffd9\015\uffd9\016\uffd9\017\uffd9\052\uffd9\001\002\000" +
    "\014\004\061\015\057\016\054\017\064\052\060\001\002" +
    "\000\016\005\227\010\104\011\106\012\107\013\101\014" +
    "\103\001\002\000\004\006\uffd8\001\002\000\004\006\032" +
    "\001\002\000\030\006\uffd7\007\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\027\uffd7\031\uffd7\033\uffd7\034\uffd7\042\uffd7\052\uffd7" +
    "\001\002\000\014\004\061\015\057\016\054\017\064\052" +
    "\060\001\002\000\016\010\104\011\106\012\107\013\101" +
    "\014\103\024\234\001\002\000\030\006\uffe0\007\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\027\uffe0\031\uffe0\033\uffe0\034\uffe0" +
    "\042\uffe0\052\uffe0\001\002\000\030\006\uffea\007\uffea\020" +
    "\uffea\021\uffea\022\uffea\027\uffea\031\uffea\033\uffea\034\uffea" +
    "\042\uffea\052\uffea\001\002\000\010\020\013\021\010\022" +
    "\007\001\002\000\004\052\240\001\002\000\006\005\ufff2" +
    "\023\ufff2\001\002\000\004\006\242\001\002\000\010\020" +
    "\ufffa\021\ufffa\022\ufffa\001\002\000\010\020\013\021\010" +
    "\022\007\001\002\000\012\007\250\020\013\021\010\022" +
    "\007\001\002\000\004\052\175\001\002\000\006\023\176" +
    "\024\247\001\002\000\012\007\uffad\020\uffad\021\uffad\022" +
    "\uffad\001\002\000\004\024\254\001\002\000\004\052\175" +
    "\001\002\000\006\023\176\024\253\001\002\000\012\007" +
    "\uffae\020\uffae\021\uffae\022\uffae\001\002\000\014\002\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\046\ufff9\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\016\004\027\003\001\001\000\010\022" +
    "\013\025\010\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\013\025\010\026\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\015\001\001\000\002\001\001\000" +
    "\004\002\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\021\001\001\000\006\003\022\022\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\235\001\001\000\004\033\027\001\001\000" +
    "\004\004\030\001\001\000\002\001\001\000\004\034\032" +
    "\001\001\000\006\005\034\037\033\001\001\000\012\004" +
    "\037\006\234\017\045\022\044\001\001\000\004\036\036" +
    "\001\001\000\002\001\001\000\012\004\037\006\043\017" +
    "\045\022\044\001\001\000\002\001\001\000\004\044\231" +
    "\001\001\000\002\001\001\000\004\015\124\001\001\000" +
    "\002\001\001\000\004\041\171\001\001\000\002\001\001" +
    "\000\004\056\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\052\001\001\000\014\010\055\013\065" +
    "\014\061\017\062\024\064\001\001\000\002\001\001\000" +
    "\004\061\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\124\001\001\000\004\066\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\107\023\076\001\001\000\004\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\074\001\001" +
    "\000\004\060\072\001\001\000\014\010\055\013\073\014" +
    "\061\017\062\024\064\001\001\000\004\020\071\001\001" +
    "\000\004\004\075\001\001\000\002\001\001\000\004\064" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\055\017\062\024\113\001\001\000\004\023\076\001\001" +
    "\000\010\010\055\017\062\024\115\001\001\000\004\023" +
    "\076\001\001\000\010\010\055\017\062\024\117\001\001" +
    "\000\004\023\076\001\001\000\002\001\001\000\004\065" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\055\011\134\017\062\024\135\001\001\000" +
    "\002\001\001\000\004\023\076\001\001\000\004\063\140" +
    "\001\001\000\002\001\001\000\010\010\055\017\062\024" +
    "\141\001\001\000\004\023\076\001\001\000\012\010\055" +
    "\014\143\017\062\024\064\001\001\000\002\001\001\000" +
    "\004\045\145\001\001\000\014\010\055\013\146\014\061" +
    "\017\062\024\064\001\001\000\004\020\071\001\001\000" +
    "\002\001\001\000\004\046\151\001\001\000\004\004\152" +
    "\001\001\000\002\001\001\000\004\047\154\001\001\000" +
    "\004\004\155\001\001\000\002\001\001\000\004\004\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\162\001\001\000\014\010\055\013\163\014\061\017\062" +
    "\024\064\001\001\000\004\020\071\001\001\000\002\001" +
    "\001\000\004\040\166\001\001\000\010\010\055\017\062" +
    "\024\167\001\001\000\004\023\076\001\001\000\002\001" +
    "\001\000\006\007\173\017\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\124\001\001\000\004\017" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\205\001\001\000\004\042\202\001\001\000\010\010" +
    "\055\017\062\024\203\001\001\000\004\023\076\001\001" +
    "\000\002\001\001\000\012\010\055\011\206\017\062\024" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\214\001\001\000\010\010\055\017\062\024\215\001\001" +
    "\000\004\023\076\001\001\000\004\051\217\001\001\000" +
    "\014\010\055\013\220\014\061\017\062\024\064\001\001" +
    "\000\004\020\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\224\001\001\000\010\010\055\017\062" +
    "\024\225\001\001\000\004\023\076\001\001\000\004\053" +
    "\227\001\001\000\004\004\230\001\001\000\002\001\001" +
    "\000\010\010\055\017\062\024\232\001\001\000\004\023" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\242\001\001\000\006\012\243" +
    "\022\244\001\001\000\004\022\250\001\001\000\006\007" +
    "\245\017\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\251\017\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String filename = Analizador.filename;
    String structure;
    String header;
    String[] functions;
    String actualHeader;
    String[] headers = new String[0];
    String[] variables = new String[0];
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              String RESULT =null;
System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title>"+filename+"</title>");System.out.println("<style>\n.cte {color:rgb(19,189,72);}\n.ident {color:rgb(55,40,244);}\n.palres {color:rgb(0,0,0);font-weight:bold;}\n</style>");System.out.println("</head>\n");System.out.println("<body>");
    System.out.println("<A NAME=\"inicio\">\n<H1>Programa: "+filename+"</H1>\n<H2>Funciones</H2>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= NT$0 PROGRAM 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] prog = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("<UL>");
    for(int i=0;i<headers.length;i++){
        String[] parts = headers[i].split(" ");
        System.out.println("<LI><A HREF=\"#"+parts[1]+"\">"+headers[i]+"</A></LI>");
    }
    System.out.println("</UL>\n");

    for(int i=0;i<prog.length;i++){
        System.out.println(prog[i]);
    }
    System.out.println("</body>");System.out.println("</HTML>");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PART PROGRAM 
            {
              String[] RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String part = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int programleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int programright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] program = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] res = new String[program.length+1];
    if(part.split(">")[3].equals("struct</SPAN")){
        for(int i=0;i<program.length;i++){
            res[i]=program[i];
        }
        res[program.length]=part;
    }else{
        res[0]=part;
        for(int i=1;i<program.length+1;i++){
            res[i]=program[i-1];
        }
    }
    structure ="";
    RESULT=res;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PART 
            {
              String[] RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String part = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String[] res={part};
    structure =""; RESULT=res;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 structure = "<hr/>\n";
    structure = structure + "<A NAME=\""+actualHeader+"\">\n";structure = structure + "<code>\n";structure = structure +  "<SPAN CLASS=\"palres\">";
    switch(type){
        case "v": structure = structure + "void </SPAN>";header = "void "; break;
        case "i": structure = structure + "int </SPAN>";header = "int "; break;
        case "f": structure = structure + "float </SPAN>";header = "float "; break;
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PART ::= TYPE NT$1 RESTPART 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int restpartleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restpartright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String restpart = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		structure = structure + "</code>\n";RESULT=structure;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = "<hr/>\n<code>\n"; 
    structure = structure +  "<SPAN CLASS=\"palres\">struct</SPAN><SPAN CLASS=\"ident\"> "+ident1+"</SPAN><BR/>\n {\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PART ::= struct ident left_bracket NT$2 LFIELD right_bracket semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		structure = structure + "};"; structure = structure +  "</code>\n";structure = structure +  "<BR/>\n";RESULT=structure; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    header = header + ident1;
    structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN> (";
    actualHeader = ident1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String listparam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    String[] resheaders = new String[headers.length+1];    
    header = header +" ("+listparam+")";
    
    for(int i=0;i<headers.length;i++){
        resheaders[i]=headers[i];
    }
    resheaders[headers.length]=header;
    headers = resheaders;
    structure = structure + ")<BR/>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RESTPART ::= ident left_parenthesis NT$3 LISTPARAM right_parenthesis NT$4 BLQ 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int listparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String listparam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		structure = structure + "<A HREF=\"#"+ident1+"\">Comienzo de la función</A>\n";
    structure = structure + " <A HREF=\"#inicio\">Comienzo de la página</A>\n"; structure = structure + "<BR/>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
structure = structure + "{\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLQ ::= left_bracket NT$5 SENTLIST right_bracket 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + "}<BR/>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int listparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String listparam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure + ", ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTPARAM ::= LISTPARAM comma NT$6 TYPE ident 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String listparam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		structure = structure + "<SPAN CLASS=\"palres\">";
    switch(type){
    case "v": structure = structure + "void </SPAN>";listparam = listparam + ", void "+ident1; break;
    case "i": structure = structure + "int </SPAN>";listparam = listparam + ", int "+ident1; break;
    case "f": structure = structure + "float </SPAN>";listparam = listparam + ", float "+ident1; break;
    };structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";RESULT = listparam;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTPARAM ::= TYPE ident 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String param = "";structure = structure + "<SPAN CLASS=\"palres\">";
    switch(type){
    case "v": structure = structure + "void </SPAN>";param = param + "void "; break;
    case "i": structure = structure + "int </SPAN>";param = param + "int "; break;
    case "f": structure = structure + "float </SPAN>";param = param + "float "; break;
    }; structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";
    param = param + ident1; 
    RESULT = param;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= void_token 
            {
              String RESULT =null;
		RESULT = "v";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TYPE ::= int_token 
            {
              String RESULT =null;
		RESULT = "i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TYPE ::= float_token 
            {
              String RESULT =null;
		RESULT = "f";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              String RESULT =null;
structure = structure + "<DIV style=\"text-indent: .5cm\">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTLIST ::= SENTLIST NT$7 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		structure = structure + "</DIV>\n";RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$8 ::= 
            {
              String RESULT =null;
structure = structure + "<DIV style=\"text-indent: .5cm\">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTLIST ::= NT$8 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		structure = structure  + "</DIV>\n";RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure + " = ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= ID equal NT$9 EXP semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure  + ";";RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$10 ::= 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    switch(type){
    case "v": structure = structure + "<SPAN CLASS=\"palres\">void</SPAN>  "; break;
    case "i": structure = structure + "<SPAN CLASS=\"palres\">int</SPAN> "; break;
    case "f": structure = structure + "<SPAN CLASS=\"palres\">float</SPAN> "; break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= TYPE NT$10 LID semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    boolean repeated = false;
    for(int i=0;i<variables.length;i++){
        if(ident1.split(">")[2].split("<")[0].equals(variables[i])){
            repeated=true;
        }
    }
    if(!repeated){
        String[] res = new String[variables.length+1];
        for(int i=0;i<variables.length;i++){
            res[i]=variables[i];
        }
        res[variables.length]=ident1.split(">")[2].split("<")[0];
        variables = res;
    }
    structure = structure + ident1+";";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$11 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    boolean isVariable=false;
    for(int i=0;i<variables.length;i++){
        if(variables[i].equals(ident1)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a> = ";
        }
    }
    if (!isVariable){   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a> = ";
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT ::= ident equal NT$11 EXP semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + ";";RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$12 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    boolean isFunction=false;
    for(int i=0;i<headers.length;i++){
        if(headers[i].split(" ")[1].equals(ident1)){
            isFunction = true;
            structure = structure + "<A HREF=\"#"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></A>(";
        }
    }
    if (!isFunction){   
        structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>(";
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT ::= ident left_parenthesis NT$12 LEXP right_parenthesis semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		structure = structure + ");";RESULT = lexp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              String RESULT =null;
structure = structure + "<SPAN CLASS=\"palres\">return</SPAN> ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= return_token NT$13 EXP semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		structure = structure + ";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$14 ::= 
            {
              String RESULT =null;
structure = structure + "if (";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$15 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
structure = structure + ") then";structure = structure + "<BR/>\n";RESULT = lcond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$16 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure + "else";structure = structure + "<BR/>\n"; RESULT = blq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= if_token left_parenthesis NT$14 LCOND right_parenthesis then_token NT$15 BLQ else_token NT$16 BLQ 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$17 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure + "for("+"<SPAN CLASS=\"ident\">"+ident1+ "</SPAN> = ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$18 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure +  ";";RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
lcond = lcond + "; <SPAN CLASS=\"ident\">"+ident2+"</SPAN> = ";RESULT = lcond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$20 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
exp1 = exp1 + ")";exp1 = exp1 + "<BR/>\n"; RESULT = exp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= for_token left_parenthesis ident equal NT$17 EXP semicolon NT$18 LCOND semicolon ident equal NT$19 EXP right_parenthesis NT$20 BLQ 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$21 ::= 
            {
              String RESULT =null;
structure = structure + "while (";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$22 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
structure = structure + ")";lcond = lcond + "<BR/>\n";RESULT = lcond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT ::= while_token left_parenthesis NT$21 LCOND right_parenthesis NT$22 BLQ 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$23 ::= 
            {
              String RESULT =null;
structure = structure + "do ";structure = structure + "<BR/>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$24 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
structure = structure + "until (";RESULT = blq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT ::= do_token NT$23 BLQ until_token left_parenthesis NT$24 LCOND right_parenthesis 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lcondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lcond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + ")";RESULT = lcond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT ::= BLQ 
            {
              String RESULT =null;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$25 ::= 
            {
              String RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    switch(opl){
        case "a": structure = structure + " and "; break;
        case "o": structure = structure + " or "; break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LCOND ::= LCOND OPL NT$25 LCOND 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LCOND ::= COND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$26 ::= 
            {
              String RESULT =null;
structure = structure + " not ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LCOND ::= not NT$26 COND 
            {
              String RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPL ::= or 
            {
              String RESULT =null;
		RESULT = "o";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPL ::= and 
            {
              String RESULT =null;
		RESULT = "a";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$27 ::= 
            {
              String RESULT =null;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    switch(opr){
        case "lt": structure = structure + " < "; break;
        case "mt": structure = structure + " > "; break;
        case "mte": structure = structure + " >= "; break;
        case "lte": structure = structure + " <= "; break;
        case "de": structure = structure + " == "; break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND ::= EXP OPR NT$27 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPR ::= double_equal 
            {
              String RESULT =null;
		RESULT = "de";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPR ::= less_than 
            {
              String RESULT =null;
		RESULT = "lt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPR ::= more_than 
            {
              String RESULT =null;
		RESULT = "mt";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPR ::= more_than_equal_to 
            {
              String RESULT =null;
		RESULT = "mte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPR ::= less_than_equal_to 
            {
              String RESULT =null;
		RESULT = "lte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LEXP ::= EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$28 ::= 
            {
              String RESULT =null;
structure = structure + ", ";String s = ", ";RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LEXP ::= LEXP comma NT$28 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$29 ::= 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    switch(op){
    case "as": structure = structure + " + "; break;
    case "ss": structure = structure + " - "; break;
    case "ms": structure = structure + " * "; break;
    case "s": structure = structure + " / "; break;
    case "p": structure = structure + " % "; break;
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP OP NT$29 EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= FACTOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= addition_sign 
            {
              String RESULT =null;
		RESULT = "as";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= substraction_sign 
            {
              String RESULT =null;
		RESULT = "ss";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= multiplication_sign 
            {
              String RESULT =null;
		RESULT = "ms";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= slash 
            {
              String RESULT =null;
		RESULT = "s";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= percent 
            {
              String RESULT =null;
		RESULT = "p";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$30 ::= 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    structure = structure + "<SPAN CLASS=\"ident\">"+ident1 +"</SPAN> (";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FACTOR ::= ident left_parenthesis NT$30 LEXP right_parenthesis 
            {
              String RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lexp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + ")" ; RESULT = lexp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$31 ::= 
            {
              String RESULT =null;

    structure = structure + "(";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FACTOR ::= left_parenthesis NT$31 EXP right_parenthesis 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + ")";RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FACTOR ::= constint 
            {
              String RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FACTOR ::= constfloat 
            {
              String RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FACTOR ::= constlit 
            {
              String RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>" ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FACTOR ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    boolean isVariable=false;
    for(int i=0;i<variables.length;i++){
        if(variables[i].equals(id)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+id+"\"><SPAN CLASS=\"id\">"+id+"</SPAN></a>";
        }
    }
    if (!isVariable && id!=null) {   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+id+"</SPAN></a>";
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    switch(type){
    case "v": structure = structure + "<DIV style=\"text-indent: .5cm\">void "+ident1+";</DIV>\n"; break;
    case "i": structure = structure + "<DIV style=\"text-indent: .5cm\">int "+ident1+";</DIV>\n"; break;
    case "f": structure = structure + "<DIV style=\"text-indent: .5cm\">float "+ident1+";</DIV>\n"; break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LFIELD ::= TYPE LID semicolon 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    switch(type){
    case "v": structure = structure + "<DIV style=\"text-indent: .5cm\">void "+ident1+";</DIV>\n"; break;
    case "i": structure = structure + "<DIV style=\"text-indent: .5cm\">int "+ident1+";</DIV>\n"; break;
    case "f": structure = structure + "<DIV style=\"text-indent: .5cm\">float "+ident1+";</DIV>\n"; break;
    };
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ID ::= ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ident1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ID ::= ident dot ident 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ident2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

structure = structure + "<a href=\"#"+ident1+"\">"+ident1+"</a>.<a href=\"#"+ident1+":"+ident2+"\">"+ident2+"</a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LID ::= ID 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "<a><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LID ::= LID comma ID 
            {
              String RESULT =null;
		int lid1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lid1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lid1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lid1 + ", <a><SPAN CLASS=\"ident\">"+id1+"</SPAN></a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ID ::= ident LDIM 
            {
              String RESULT =null;
		int ident1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ident1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ldim1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    boolean isVariable=false;
    for(int i=0;i<variables.length;i++){
        if(variables[i].equals(ident1)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>+ldim1";
        }
    }
    if (!isVariable){   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>+ldim1";
    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              String RESULT =null;
		int ldim1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ldim1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ldim1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + "["+const1+"]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              String RESULT =null;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object const1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		structure = structure + "["+const1+"]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
