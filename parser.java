package practica_pl;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\010\000\002\005\007" +
    "\000\002\007\005\000\002\006\006\000\002\006\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\006\000\002\011" +
    "\005\000\002\011\006\000\002\011\007\000\002\011\005" +
    "\000\002\011\012\000\002\011\017\000\002\011\007\000" +
    "\002\011\010\000\002\011\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\004\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\016\003\000\002\016\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\006" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\017\006\000\002" +
    "\017\005\000\002\024\003\000\002\024\005\000\002\012" +
    "\003\000\002\012\005\000\002\024\004\000\002\025\006" +
    "\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\012\021\010\022\005\023\004\047\006\001" +
    "\002\000\004\004\ufff6\001\002\000\004\004\ufff7\001\002" +
    "\000\004\004\202\001\002\000\014\002\uffff\021\010\022" +
    "\005\023\004\047\006\001\002\000\004\004\ufff8\001\002" +
    "\000\004\004\015\001\002\000\004\002\013\001\002\000" +
    "\004\002\000\001\002\000\014\002\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\047\ufffe\001\002\000\004\005\016\001\002\000" +
    "\010\021\010\022\005\023\004\001\002\000\006\006\023" +
    "\024\022\001\002\000\004\004\021\001\002\000\006\006" +
    "\ufff9\024\ufff9\001\002\000\010\021\010\022\005\023\004" +
    "\001\002\000\004\007\025\001\002\000\014\002\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\047\ufffc\001\002\000\026\004\030" +
    "\007\025\021\010\022\005\023\004\030\040\032\037\034" +
    "\031\035\026\043\036\001\002\000\014\004\046\005\047" +
    "\016\044\017\042\020\052\001\002\000\030\004\uffea\007" +
    "\uffea\010\uffea\021\uffea\022\uffea\023\uffea\030\uffea\032\uffea" +
    "\034\uffea\035\uffea\043\uffea\001\002\000\012\005\166\026" +
    "\167\050\104\051\105\001\002\000\004\005\152\001\002" +
    "\000\030\004\030\007\025\010\150\021\010\022\005\023" +
    "\004\030\040\032\037\034\031\035\026\043\036\001\002" +
    "\000\030\004\ufff4\007\ufff4\010\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\030\ufff4\032\ufff4\034\ufff4\035\ufff4\043\ufff4\001\002" +
    "\000\004\004\144\001\002\000\004\026\137\001\002\000" +
    "\004\007\025\001\002\000\004\005\123\001\002\000\004" +
    "\005\041\001\002\000\016\004\046\005\047\016\044\017" +
    "\042\020\052\046\043\001\002\000\040\006\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\024\uffd2\025\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2" +
    "\001\002\000\014\004\046\005\047\016\044\017\042\020" +
    "\052\001\002\000\040\006\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\024\uffd3\025\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3\001\002\000\040" +
    "\006\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\024" +
    "\uffdb\025\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\001\002\000\046\005\103\006\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\024\uffcd\025\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045" +
    "\uffcd\050\104\051\105\001\002\000\014\004\046\005\047" +
    "\016\044\017\042\020\052\001\002\000\012\006\uffe8\025" +
    "\uffe8\044\uffe8\045\uffe8\001\002\000\040\006\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\024\uffd0\025\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\001\002\000\040\006\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\024\uffd1\025\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\044\uffd1\045\uffd1\001\002\000\026\011" +
    "\070\012\072\013\074\014\065\015\067\036\066\037\076" +
    "\040\075\041\071\042\064\001\002\000\010\006\057\044" +
    "\055\045\056\001\002\000\016\004\uffe5\005\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\046\uffe5\001\002\000\016\004\uffe6\005" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\046\uffe6\001\002\000\004" +
    "\007\025\001\002\000\016\004\046\005\047\016\044\017" +
    "\042\020\052\046\043\001\002\000\012\006\uffe9\025\uffe9" +
    "\044\055\045\056\001\002\000\030\004\uffec\007\uffec\010" +
    "\uffec\021\uffec\022\uffec\023\uffec\030\uffec\032\uffec\034\uffec" +
    "\035\uffec\043\uffec\001\002\000\014\004\046\005\047\016" +
    "\044\017\042\020\052\001\002\000\014\004\uffe3\005\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\001\002\000\014\004\uffd7\005" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\001\002\000\014\004\uffe1" +
    "\005\uffe1\016\uffe1\017\uffe1\020\uffe1\001\002\000\014\004" +
    "\uffd6\005\uffd6\016\uffd6\017\uffd6\020\uffd6\001\002\000\014" +
    "\004\uffda\005\uffda\016\uffda\017\uffda\020\uffda\001\002\000" +
    "\014\004\uffe0\005\uffe0\016\uffe0\017\uffe0\020\uffe0\001\002" +
    "\000\014\004\uffd9\005\uffd9\016\uffd9\017\uffd9\020\uffd9\001" +
    "\002\000\014\004\046\005\047\016\044\017\042\020\052" +
    "\001\002\000\014\004\uffd8\005\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\001\002\000\014\004\uffdf\005\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\001\002\000\014\004\uffe2\005\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\001\002\000\024\006\uffe4\011\070\012\072" +
    "\013\074\014\065\015\067\025\uffe4\044\uffe4\045\uffe4\001" +
    "\002\000\040\006\uffdc\011\070\012\072\013\074\014\065" +
    "\015\067\024\uffdc\025\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\044\uffdc\045\uffdc\001\002\000\016\006\102" +
    "\011\070\012\072\013\074\014\065\015\067\001\002\000" +
    "\040\006\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\024\uffd4\025\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\001\002\000\014\004\046\005\047" +
    "\016\044\017\042\020\052\001\002\000\004\004\114\001" +
    "\002\000\004\016\112\001\002\000\044\006\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9" +
    "\045\uffc9\051\107\001\002\000\004\016\110\001\002\000" +
    "\004\052\111\001\002\000\044\006\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\024\uffc8\025\uffc8\026\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\045\uffc8" +
    "\051\uffc8\001\002\000\004\052\113\001\002\000\044\006" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\051\uffc7\001\002\000\042\006\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\044\uffcc\045\uffcc\001\002\000\006\006\120\024\117\001" +
    "\002\000\020\006\uffde\011\070\012\072\013\074\014\065" +
    "\015\067\024\uffde\001\002\000\014\004\046\005\047\016" +
    "\044\017\042\020\052\001\002\000\040\006\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\024\uffd5\025\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5" +
    "\001\002\000\020\006\uffdd\011\070\012\072\013\074\014" +
    "\065\015\067\024\uffdd\001\002\000\012\006\uffe7\025\uffe7" +
    "\044\uffe7\045\uffe7\001\002\000\016\004\046\005\047\016" +
    "\044\017\042\020\052\046\043\001\002\000\010\006\125" +
    "\044\055\045\056\001\002\000\004\033\126\001\002\000" +
    "\004\007\025\001\002\000\004\031\130\001\002\000\004" +
    "\007\025\001\002\000\030\004\uffee\007\uffee\010\uffee\021" +
    "\uffee\022\uffee\023\uffee\030\uffee\032\uffee\034\uffee\035\uffee" +
    "\043\uffee\001\002\000\004\027\133\001\002\000\004\005" +
    "\134\001\002\000\016\004\046\005\047\016\044\017\042" +
    "\020\052\046\043\001\002\000\010\006\136\044\055\045" +
    "\056\001\002\000\030\004\uffeb\007\uffeb\010\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\030\uffeb\032\uffeb\034\uffeb\035\uffeb\043" +
    "\uffeb\001\002\000\014\004\046\005\047\016\044\017\042" +
    "\020\052\001\002\000\016\011\070\012\072\013\074\014" +
    "\065\015\067\025\141\001\002\000\030\004\ufff3\007\ufff3" +
    "\010\ufff3\021\ufff3\022\ufff3\023\ufff3\030\ufff3\032\ufff3\034" +
    "\ufff3\035\ufff3\043\ufff3\001\002\000\006\024\uffcb\025\uffcb" +
    "\001\002\000\006\024\145\025\146\001\002\000\012\024" +
    "\uffcd\025\uffcd\050\104\051\105\001\002\000\004\004\144" +
    "\001\002\000\030\004\ufff2\007\ufff2\010\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\030\ufff2\032\ufff2\034\ufff2\035\ufff2\043\ufff2" +
    "\001\002\000\006\024\uffca\025\uffca\001\002\000\040\002" +
    "\ufffb\004\ufffb\007\ufffb\010\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb\043" +
    "\ufffb\047\ufffb\001\002\000\030\004\ufff5\007\ufff5\010\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\030\ufff5\032\ufff5\034\ufff5\035" +
    "\ufff5\043\ufff5\001\002\000\004\004\153\001\002\000\004" +
    "\026\154\001\002\000\014\004\046\005\047\016\044\017" +
    "\042\020\052\001\002\000\016\011\070\012\072\013\074" +
    "\014\065\015\067\025\156\001\002\000\016\004\046\005" +
    "\047\016\044\017\042\020\052\046\043\001\002\000\010" +
    "\025\160\044\055\045\056\001\002\000\004\004\161\001" +
    "\002\000\004\026\162\001\002\000\014\004\046\005\047" +
    "\016\044\017\042\020\052\001\002\000\016\006\164\011" +
    "\070\012\072\013\074\014\065\015\067\001\002\000\004" +
    "\007\025\001\002\000\030\004\uffed\007\uffed\010\uffed\021" +
    "\uffed\022\uffed\023\uffed\030\uffed\032\uffed\034\uffed\035\uffed" +
    "\043\uffed\001\002\000\014\004\046\005\047\016\044\017" +
    "\042\020\052\001\002\000\014\004\046\005\047\016\044" +
    "\017\042\020\052\001\002\000\016\011\070\012\072\013" +
    "\074\014\065\015\067\025\171\001\002\000\030\004\ufff1" +
    "\007\ufff1\010\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\043\ufff1\001\002\000\006\006\173" +
    "\024\117\001\002\000\004\025\174\001\002\000\030\004" +
    "\ufff0\007\ufff0\010\ufff0\021\ufff0\022\ufff0\023\ufff0\030\ufff0" +
    "\032\ufff0\034\ufff0\035\ufff0\043\ufff0\001\002\000\016\011" +
    "\070\012\072\013\074\014\065\015\067\025\176\001\002" +
    "\000\030\004\uffef\007\uffef\010\uffef\021\uffef\022\uffef\023" +
    "\uffef\030\uffef\032\uffef\034\uffef\035\uffef\043\uffef\001\002" +
    "\000\004\004\200\001\002\000\006\006\ufffa\024\ufffa\001" +
    "\002\000\004\002\001\001\002\000\004\007\203\001\002" +
    "\000\010\021\010\022\005\023\004\001\002\000\012\010" +
    "\210\021\010\022\005\023\004\001\002\000\004\004\144" +
    "\001\002\000\006\024\145\025\207\001\002\000\012\010" +
    "\uffce\021\uffce\022\uffce\023\uffce\001\002\000\004\025\214" +
    "\001\002\000\004\004\144\001\002\000\006\024\145\025" +
    "\213\001\002\000\012\010\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\001\002\000\014\002\ufffd\021\ufffd\022\ufffd\023\ufffd\047" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\010\002\011\003\006\004\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\200\003\006\004\010\001\001\000\002\001\001\000" +
    "\004\005\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\017\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\176\001\001\000\004\007\023\001" +
    "\001\000\002\001\001\000\014\004\033\007\026\010\031" +
    "\011\032\024\034\001\001\000\010\013\174\015\044\024" +
    "\050\001\001\000\002\001\001\000\004\025\105\001\001" +
    "\000\002\001\001\000\012\004\033\007\026\011\150\024" +
    "\034\001\001\000\002\001\001\000\006\012\142\024\141" +
    "\001\001\000\002\001\001\000\004\007\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\052\015\044" +
    "\020\053\022\047\024\050\001\001\000\002\001\001\000" +
    "\012\013\052\015\044\022\121\024\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\105\001\001\000" +
    "\010\013\100\015\044\024\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\062\023" +
    "\072\001\001\000\004\021\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\061\001\001\000\014\013" +
    "\052\015\044\020\060\022\047\024\050\001\001\000\004" +
    "\021\057\001\001\000\002\001\001\000\010\013\077\015" +
    "\044\024\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\076\015\044" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\062\001\001\000\004\014\062" +
    "\001\001\000\004\014\062\001\001\000\002\001\001\000" +
    "\012\013\115\015\044\016\114\024\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\062\001\001\000\010\013\120\015\044\024\050" +
    "\001\001\000\002\001\001\000\004\014\062\001\001\000" +
    "\002\001\001\000\014\013\052\015\044\020\123\022\047" +
    "\024\050\001\001\000\004\021\057\001\001\000\002\001" +
    "\001\000\004\007\126\001\001\000\002\001\001\000\004" +
    "\007\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\052\015\044\020\134\022\047" +
    "\024\050\001\001\000\004\021\057\001\001\000\002\001" +
    "\001\000\010\013\137\015\044\024\050\001\001\000\004" +
    "\014\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\105\001\001\000\004\024\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\154\015\044\024\050\001\001\000\004\014" +
    "\062\001\001\000\014\013\052\015\044\020\156\022\047" +
    "\024\050\001\001\000\004\021\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\162\015\044\024\050" +
    "\001\001\000\004\014\062\001\001\000\004\007\164\001" +
    "\001\000\002\001\001\000\012\013\115\015\044\016\171" +
    "\024\050\001\001\000\010\013\167\015\044\024\050\001" +
    "\001\000\004\014\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\204\017\203\001\001\000\004\004\210\001\001\000\006" +
    "\012\205\024\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\211\024\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PART ::= TYPE RESTPART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PART ::= struct ident left_bracket LFIELD right_bracket semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RESTPART ::= ident left_parenthesis LISTPARAM right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLQ ::= left_bracket SENTLIST right_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTPARAM ::= LISTPARAM comma TYPE ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTPARAM ::= TYPE ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TYPE ::= void_token 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TYPE ::= int_token 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TYPE ::= float_token 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= ID equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= ident equal EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= ident left_parenthesis LEXP right_parenthesis semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= return_token EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= if_token left_parenthesis LCOND right_parenthesis then_token BLQ else_token BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= for_token left_parenthesis ident equal EXP semicolon LCOND semicolon ident equal EXP right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= while_token left_parenthesis LCOND right_parenthesis BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= do_token BLQ until_token left_parenthesis LCOND right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LCOND ::= LCOND OPL LCOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LCOND ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCOND ::= not COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPL ::= or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPL ::= and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPR ::= double_equal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPR ::= less_than 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPR ::= more_than 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPR ::= more_than_equal_to 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPR ::= less_than_equal_to 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LEXP ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LEXP ::= LEXP comma EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP OP EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= FACTOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= addition_sign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= substraction_sign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= multiplication_sign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= slash 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= percent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= ident left_parenthesis LEXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= left_parenthesis EXP right_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= constint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FACTOR ::= constfloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FACTOR ::= constlit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FACTOR ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LFIELD ::= LFIELD TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LFIELD ::= TYPE LID semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LFIELD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ID ::= ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ID ::= ident dot ident 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LID ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LID ::= LID comma ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ID ::= ident LDIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LDIM ::= LDIM left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LDIM ::= left_squarebracket constint right_squarebracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDIM",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
