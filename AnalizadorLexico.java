/* The following code was generated by JFlex 1.6.1 */

  import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Hector/Desktop/Universidad/3 curso/2Cuatrimestre/PL/practicaObligatoria/Practica_Obligatoria_PL/Practica_Obligatoria_PL.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CONSTLIT = 2;
  public static final int CONSTLIT2 = 4;
  public static final int ZERO = 6;
  public static final int HEX = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\16\1\16\1\16\1\16\26\0\1\1\1\36\1\0\1\13"+
    "\1\20\1\21\1\17\1\4\1\24\1\5\1\6\1\15\1\11\7\7"+
    "\2\2\1\54\1\51\1\46\1\43\1\47\2\0\6\10\24\1\1\52"+
    "\1\14\1\53\1\0\1\3\1\0\1\35\1\10\1\50\1\30\1\40"+
    "\1\33\1\1\1\37\1\27\2\1\1\34\1\1\1\31\1\26\2\1"+
    "\1\42\1\41\1\32\1\45\1\25\1\44\1\12\2\1\1\22\1\0"+
    "\1\23\7\0\1\16\u1fa2\0\1\16\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\10\2\1\20\3\2\1\21\2\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\1\3\0\1\31"+
    "\1\32\1\0\1\33\1\34\1\2\1\35\1\2\1\36"+
    "\1\37\10\2\1\40\2\2\1\41\1\42\1\43\1\44"+
    "\2\3\2\0\1\2\1\45\1\46\1\2\1\47\1\2"+
    "\1\50\5\2\3\0\1\51\1\52\1\53\1\2\1\54"+
    "\4\2\2\44\1\0\1\55\1\56\2\2\1\57\1\60"+
    "\1\61\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u013b\0\264\0\u0168\0\264\0\264\0\u0195\0\u01c2\0\264"+
    "\0\264\0\264\0\264\0\264\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\264\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\264\0\264\0\264"+
    "\0\264\0\264\0\u04bf\0\u04ec\0\u0519\0\u013b\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\264\0\264\0\u05fa\0\341\0\u0627\0\341"+
    "\0\341\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\264\0\u07bc\0\u07e9\0\264\0\264\0\264\0\u0519"+
    "\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\341\0\341\0\u08f7"+
    "\0\341\0\u0924\0\341\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\264\0\341\0\341\0\u0ab9\0\341"+
    "\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0a32\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\341\0\u0c21\0\u0c4e\0\341\0\341\0\u0c7b\0\341\0\341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\12\1\7"+
    "\1\6\1\13\1\6\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\6\1\34\1\35\1\6"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\6\1\46\1\47\1\50\1\51\13\5\1\52\1\53"+
    "\54\5\1\54\115\5\56\0\3\6\3\0\4\6\12\0"+
    "\11\6\1\0\4\6\1\0\2\6\2\0\1\6\6\0"+
    "\1\7\3\0\1\55\1\7\1\0\1\7\45\0\1\7"+
    "\1\0\2\56\1\0\1\7\1\0\1\7\45\0\1\7"+
    "\1\0\2\57\1\55\1\7\1\0\1\7\1\60\57\0"+
    "\1\61\1\0\1\62\51\0\1\63\1\64\40\0\3\6"+
    "\3\0\4\6\12\0\1\6\1\65\7\6\1\0\4\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\11\6\1\0\3\6\1\66\1\0\2\6\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\4\6\1\67"+
    "\1\6\1\70\2\6\1\0\4\6\1\0\2\6\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\1\6\1\71"+
    "\7\6\1\0\4\6\1\0\2\6\2\0\1\6\5\0"+
    "\3\6\3\0\4\6\12\0\1\6\1\72\7\6\1\0"+
    "\4\6\1\0\2\6\2\0\1\6\5\0\3\6\3\0"+
    "\4\6\12\0\11\6\1\0\1\73\3\6\1\0\2\6"+
    "\2\0\1\6\5\0\3\6\3\0\4\6\12\0\1\6"+
    "\1\74\5\6\1\75\1\6\1\0\4\6\1\0\2\6"+
    "\2\0\1\6\5\0\3\6\3\0\4\6\12\0\4\6"+
    "\1\76\4\6\1\0\4\6\1\0\2\6\2\0\1\6"+
    "\5\0\3\6\3\0\4\6\12\0\7\6\1\77\1\6"+
    "\1\0\4\6\1\0\2\6\2\0\1\6\5\0\3\6"+
    "\3\0\4\6\12\0\5\6\1\100\3\6\1\0\4\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\11\6\1\0\1\6\1\101\2\6\1\0\2\6"+
    "\2\0\1\6\47\0\1\102\12\0\3\6\3\0\4\6"+
    "\12\0\11\6\1\0\1\103\3\6\1\0\2\6\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\4\6\1\104"+
    "\4\6\1\0\4\6\1\0\2\6\2\0\1\6\47\0"+
    "\1\105\54\0\1\106\24\0\1\107\54\0\1\14\43\0"+
    "\1\110\4\0\1\110\1\0\1\110\47\0\2\57\1\0"+
    "\1\111\1\0\1\111\45\0\1\112\1\0\2\113\1\0"+
    "\3\112\16\0\1\112\2\0\1\112\1\0\1\112\2\0"+
    "\1\112\7\0\1\112\4\0\16\61\1\0\36\61\15\62"+
    "\1\0\1\62\1\114\35\62\1\0\3\6\3\0\4\6"+
    "\12\0\2\6\1\115\6\6\1\0\4\6\1\0\2\6"+
    "\2\0\1\6\5\0\3\6\3\0\4\6\12\0\5\6"+
    "\1\116\3\6\1\0\4\6\1\0\2\6\2\0\1\6"+
    "\5\0\3\6\3\0\4\6\12\0\5\6\1\117\3\6"+
    "\1\0\4\6\1\0\2\6\2\0\1\6\5\0\3\6"+
    "\3\0\4\6\12\0\11\6\1\0\1\6\1\120\2\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\11\6\1\0\3\6\1\121\1\0\2\6\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\1\6\1\122"+
    "\7\6\1\0\4\6\1\0\2\6\2\0\1\6\5\0"+
    "\3\6\3\0\4\6\12\0\3\6\1\123\5\6\1\0"+
    "\4\6\1\0\2\6\2\0\1\6\5\0\3\6\3\0"+
    "\4\6\12\0\11\6\1\0\2\6\1\124\1\6\1\0"+
    "\2\6\2\0\1\6\5\0\3\6\3\0\4\6\12\0"+
    "\11\6\1\0\3\6\1\125\1\0\2\6\2\0\1\6"+
    "\5\0\3\6\3\0\4\6\12\0\5\6\1\126\3\6"+
    "\1\0\4\6\1\0\2\6\2\0\1\6\5\0\3\6"+
    "\3\0\4\6\12\0\2\6\1\127\6\6\1\0\4\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\5\6\1\130\3\6\1\0\4\6\1\0\2\6"+
    "\2\0\1\6\12\0\1\131\1\111\1\0\1\111\45\0"+
    "\1\112\3\0\1\132\3\112\16\0\1\112\2\0\1\112"+
    "\1\0\1\112\2\0\1\112\7\0\1\112\6\0\1\112"+
    "\1\0\2\133\1\0\3\112\16\0\1\112\2\0\1\112"+
    "\1\0\1\112\2\0\1\112\7\0\1\112\21\0\1\134"+
    "\40\0\3\6\3\0\4\6\12\0\3\6\1\135\5\6"+
    "\1\0\4\6\1\0\2\6\2\0\1\6\5\0\3\6"+
    "\3\0\4\6\12\0\4\6\1\136\4\6\1\0\4\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\10\6\1\137\1\0\4\6\1\0\2\6\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\11\6\1\0"+
    "\1\6\1\140\2\6\1\0\2\6\2\0\1\6\5\0"+
    "\3\6\3\0\4\6\12\0\11\6\1\0\4\6\1\0"+
    "\1\6\1\141\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\11\6\1\0\4\6\1\0\1\6\1\142\2\0"+
    "\1\6\5\0\3\6\3\0\4\6\12\0\7\6\1\143"+
    "\1\6\1\0\4\6\1\0\2\6\2\0\1\6\5\0"+
    "\3\6\3\0\4\6\12\0\2\6\1\144\6\6\1\0"+
    "\4\6\1\0\2\6\2\0\1\6\13\0\1\145\1\0"+
    "\1\145\45\0\1\146\3\0\1\147\3\146\16\0\1\146"+
    "\2\0\1\146\1\0\1\146\2\0\1\146\7\0\1\146"+
    "\6\0\1\150\1\0\2\133\1\0\3\150\16\0\1\150"+
    "\2\0\1\150\1\0\1\150\2\0\1\150\7\0\1\150"+
    "\5\0\3\6\3\0\4\6\12\0\5\6\1\151\3\6"+
    "\1\0\4\6\1\0\2\6\2\0\1\6\5\0\3\6"+
    "\3\0\4\6\12\0\11\6\1\0\4\6\1\0\2\6"+
    "\2\0\1\152\5\0\3\6\3\0\4\6\12\0\11\6"+
    "\1\0\3\6\1\153\1\0\2\6\2\0\1\6\5\0"+
    "\3\6\3\0\4\6\12\0\11\6\1\0\1\6\1\154"+
    "\2\6\1\0\2\6\2\0\1\6\5\0\3\6\3\0"+
    "\4\6\12\0\7\6\1\155\1\6\1\0\4\6\1\0"+
    "\2\6\2\0\1\6\6\0\1\146\4\0\3\146\16\0"+
    "\1\146\2\0\1\146\1\0\1\146\2\0\1\146\7\0"+
    "\1\146\6\0\1\156\3\0\1\147\3\156\16\0\1\156"+
    "\2\0\1\156\1\0\1\156\2\0\1\156\7\0\1\156"+
    "\6\0\1\150\4\0\3\150\16\0\1\150\2\0\1\150"+
    "\1\0\1\150\2\0\1\150\7\0\1\150\5\0\3\6"+
    "\3\0\4\6\12\0\5\6\1\157\3\6\1\0\4\6"+
    "\1\0\2\6\2\0\1\6\5\0\3\6\3\0\4\6"+
    "\12\0\4\6\1\160\4\6\1\0\4\6\1\0\2\6"+
    "\2\0\1\6\6\0\1\156\4\0\3\156\16\0\1\156"+
    "\2\0\1\156\1\0\1\156\2\0\1\156\7\0\1\156"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\1\1\2\11\2\1\5\11"+
    "\10\1\1\11\10\1\5\11\2\1\3\0\2\1\1\0"+
    "\2\11\15\1\1\11\2\1\3\11\3\1\2\0\14\1"+
    "\3\0\1\11\12\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 52: break;
          case 2: 
            { System.out.println("dien_token");
            return new java_cup.runtime.Symbol(sym.iden , yytext());
            }
          case 53: break;
          case 3: 
            {System.out.println("constint_token");
            return new java_cup.runtime.Symbol(sym.constint , yytext());
            }
          case 54: break;
          case 4: 
            {System.out.println("add_token");
            return new java_cup.runtime.Symbol(sym.addition_sign , yytext());
            }
          case 55: break;
          case 5: 
            { System.out.println("subs_token");
            return new java_cup.runtime.Symbol(sym.substraction_sign , yytext());
            }
          case 56: break;
          case 6: 
            { System.out.println("dot_token");
            return new java_cup.runtime.Symbol(sym.dot , yytext());
            }
          case 57: break;
          case 7: 
            { yybegin(CONSTLIT);
            }
          case 58: break;
          case 8: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" Starting of comment symbol not matching.\\");
            }
          case 59: break;
          case 9: 
            { System.out.println("slash_token");
            return new java_cup.runtime.Symbol(sym.slash , yytext());
            }
          case 60: break;
          case 10: 
            { System.out.println("mult_token");
            return new java_cup.runtime.Symbol(sym.multiplication_sign , yytext());
            }
          case 61: break;
          case 11: 
            { System.out.println("leftparentesis");
            return new java_cup.runtime.Symbol(sym.left_parenthesis , yytext());
            }
          case 62: break;
          case 12: 
            {System.out.println("rigthparentesis_token");
            return new java_cup.runtime.Symbol(sym.right_parenthesis , yytext());
            }
          case 63: break;
          case 13: 
            { System.out.println("leftbraket_token");
            return new java_cup.runtime.Symbol(sym.left_bracket , yytext());
            }
          case 64: break;
          case 14: 
            { System.out.println("rigthbracket_token");
            return new java_cup.runtime.Symbol(sym.right_bracket , yytext());
            }
          case 65: break;
          case 15: 
            { System.out.println("comma_token");
            return new java_cup.runtime.Symbol(sym.comma , yytext());
            }
          case 66: break;
          case 16: 
            { System.out.println("perccent_token");
            return new java_cup.runtime.Symbol(sym.percent , yytext());
            }
          case 67: break;
          case 17: 
            { System.out.println("equal");
            return new java_cup.runtime.Symbol(sym.equal , yytext());
            }
          case 68: break;
          case 18: 
            {System.out.println("lesstahn_token");
            return new java_cup.runtime.Symbol(sym.less_than , yytext());
            }
          case 69: break;
          case 19: 
            { System.out.println("morethan_token");
            return new java_cup.runtime.Symbol(sym.more_than , yytext());
            }
          case 70: break;
          case 20: 
            { System.out.println("semicolon_token");
            return new java_cup.runtime.Symbol(sym.semicolon , yytext());
            }
          case 71: break;
          case 21: 
            { System.out.println("leftsquare");
            return new java_cup.runtime.Symbol(sym.left_squarebracket , yytext());
            }
          case 72: break;
          case 22: 
            { System.out.println("rigthsquare_token");
            return new java_cup.runtime.Symbol(sym.right_squarebracket , yytext());
            }
          case 73: break;
          case 23: 
            {System.out.println("colon_token");
            return new java_cup.runtime.Symbol(sym.colon , yytext());
            }
          case 74: break;
          case 24: 
            { System.out.println("constlit_token");
            return new java_cup.runtime.Symbol(sym.constlit , yytext());
            }
          case 75: break;
          case 25: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" Hexadecimal number not completed.\\");
            }
          case 76: break;
          case 26: 
            { System.out.println("comment_token");
            return new java_cup.runtime.Symbol(sym.comment, yytext());
            }
          case 77: break;
          case 27: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" Incorrect finish comment sign.\\");
            }
          case 78: break;
          case 28: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" Start part of comment missing.\\");
            }
          case 79: break;
          case 29: 
            { System.out.println("or_token");
            return new java_cup.runtime.Symbol(sym.or , yytext());
            }
          case 80: break;
          case 30: 
            { System.out.println("if_token");
            return new java_cup.runtime.Symbol(sym.if_token , yytext());
            }
          case 81: break;
          case 31: 
            { System.out.println("do_token");
            return new java_cup.runtime.Symbol(sym.do_token , yytext());
            }
          case 82: break;
          case 32: 
            { 
                System.out.println("doubleequal_token");
                return new java_cup.runtime.Symbol(sym.double_equal , yytext());
            }
          case 83: break;
          case 33: 
            { System.out.println("morethanequalto");
            return new java_cup.runtime.Symbol(sym.more_than_equa_lto , yytext());
            }
          case 84: break;
          case 34: 
            {System.out.println("lessthanequalto_token");
            return new java_cup.runtime.Symbol(sym.less_than_equal_to , yytext());
            }
          case 85: break;
          case 35: 
            { System.out.println("constlit_token");
                yybegin(CONSTLIT2);
            }
          case 86: break;
          case 36: 
            { System.out.println("constfloat_token");
            return new java_cup.runtime.Symbol(sym.constfloat , yytext());
            }
          case 87: break;
          case 37: 
            { System.out.println("int_token");
            return new java_cup.runtime.Symbol(sym.int_token , yytext());
            }
          case 88: break;
          case 38: 
            { System.out.println("not_token");
            return new java_cup.runtime.Symbol(sym.not , yytext());
            }
          case 89: break;
          case 39: 
            { System.out.println("for_token");
            return new java_cup.runtime.Symbol(sym.for_token , yytext());
            }
          case 90: break;
          case 40: 
            { System.out.println("and_token");
            return new java_cup.runtime.Symbol(sym.and , yytext());
            }
          case 91: break;
          case 41: 
            { System.out.println("comment_token");
            return new java_cup.runtime.Symbol(sym.comment , yytext());
            }
          case 92: break;
          case 42: 
            { System.out.println("then_token");
            return new java_cup.runtime.Symbol(sym.void_token , yytext());
            }
          case 93: break;
          case 43: 
            { System.out.println("then_token");
            return new java_cup.runtime.Symbol(sym.then_token , yytext());
            }
          case 94: break;
          case 44: 
            { System.out.println(sym.else_token);
            return new java_cup.runtime.Symbol(sym.else_token , yytext());
            }
          case 95: break;
          case 45: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" More than one addition sign added.\\");
            }
          case 96: break;
          case 46: 
            { System.out.println(sym.float_token);
            return new java_cup.runtime.Symbol(sym.float_token , yytext());
            }
          case 97: break;
          case 47: 
            {System.out.println(sym.while_token);
            return new java_cup.runtime.Symbol(sym.while_token , yytext());
            }
          case 98: break;
          case 48: 
            { System.out.println(sym.until);
            return new java_cup.runtime.Symbol(sym.until , yytext());
            }
          case 99: break;
          case 49: 
            { System.out.println("\\Error in line:"+yyline+" Column: "+ yycolumn +". "+ yytext()+" More than one dot added.\\");
            }
          case 100: break;
          case 50: 
            { System.out.println(sym.struct);
                return new java_cup.runtime.Symbol(sym.struct , yytext());
            }
          case 101: break;
          case 51: 
            { System.out.println(sym.return_token);
                return new java_cup.runtime.Symbol(sym.return_token , yytext());
            }
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
