import java_cup.runtime.*;


parser code{:
    String filename = Analizador.filename;
    String structure;
    String header;
    String[] functions;
    String actualHeader;
    String[] headers = new String[0];
    String[] variables = new String[0];
    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
    }
:}


/* Terminals (tokens returned by the scanner). */
terminal  left_parenthesis, right_parenthesis, left_bracket, right_bracket, 
	addition_sign, substraction_sign, multiplication_sign, slash, percent, constint, constfloat, constlit, void_token, int_token,
 	float_token,comma, semicolon, equal, until_token, while_token, else_token, if_token, then_token, for_token, return_token,
	more_than, less_than, less_than_equal_to, more_than_equal_to, double_equal, do_token,  and, or, not, struct, dot,
	left_squarebracket, right_squarebracket;
terminal  String ident;


non terminal String RESTPART, LISTPARAM, BLQ, SENTLIST, SENT, LID, FACTOR, LEXP, LFIELD,
	 LCOND, COND, LDIM, S, ID, OPL, OPR, TYPE, OP, EXP, PART;
non terminal String[] PROGRAM;



precedence left addition_sign;
precedence left substraction_sign;
precedence left multiplication_sign;
precedence left slash;
precedence left percent;
precedence left and;
precedence left or;
precedence left equal;

S ::= {:System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title>"+filename+"</title>");System.out.println("<style>\n.cte {color:rgb(19,189,72);}\n.ident {color:rgb(55,40,244);}\n.palres {color:rgb(0,0,0);font-weight:bold;}\n</style>");System.out.println("</head>\n");System.out.println("<body>");
    System.out.println("<A NAME=\"inicio\">\n<H1>Programa: "+filename+"</H1>\n<H2>Funciones</H2>");:}
        PROGRAM:prog {:
    System.out.println("<UL>");
    for(int i=0;i<headers.length;i++){
        String[] parts = headers[i].split(" ");
        System.out.println("<LI><A HREF=\"#"+parts[1]+"\">"+headers[i]+"</A></LI>");
    }
    System.out.println("</UL>\n");

    for(int i=0;i<prog.length;i++){
        System.out.println(prog[i]);
    }
    System.out.println("</body>");System.out.println("</HTML>");:};

PROGRAM ::=  PART:part  PROGRAM:program {:
    String[] res = new String[program.length+1];
    if(part.split(">")[3].equals("struct</SPAN")){
        for(int i=0;i<program.length;i++){
            res[i]=program[i];
        }
        res[program.length]=part;
    }else{
        res[0]=part;
        for(int i=1;i<program.length+1;i++){
            res[i]=program[i-1];
        }
    }
    structure ="";
    RESULT=res;:}
|  PART:part {:String[] res={part};
    structure =""; RESULT=res;:};

PART ::= TYPE:type {: structure = "<hr/>\n";
    structure = structure + "<A NAME=\""+actualHeader+"\">\n";structure = structure + "<code>\n";structure = structure +  "<SPAN CLASS=\"palres\">";
    switch(type){
        case "v": structure = structure + "void </SPAN>";header = "void "; break;
        case "i": structure = structure + "int </SPAN>";header = "int "; break;
        case "f": structure = structure + "float </SPAN>";header = "float "; break;
    }:} RESTPART:restpart {:structure = structure + "</code>\n";RESULT=structure;:}  
|  struct ident:ident1 left_bracket {:structure = "<hr/>\n<code>\n"; 
    structure = structure +  "<SPAN CLASS=\"palres\">struct</SPAN><SPAN CLASS=\"ident\"> "+ident1+"</SPAN><BR/>\n {\n";:} LFIELD right_bracket semicolon {:structure = structure + "};"; structure = structure +  "</code>\n";structure = structure +  "<BR/>\n";RESULT=structure; :};

RESTPART ::= ident:ident1 left_parenthesis {:
    header = header + ident1;
    structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN> (";
    actualHeader = ident1;
    :} LISTPARAM:listparam right_parenthesis {:
    String[] resheaders = new String[headers.length+1];    
    header = header +" ("+listparam+")";
    
    for(int i=0;i<headers.length;i++){
        resheaders[i]=headers[i];
    }
    resheaders[headers.length]=header;
    headers = resheaders;
    structure = structure + ")<BR/>\n";
    :} BLQ:blq   {:structure = structure + "<A HREF=\"#"+ident1+"\">Comienzo de la función</A>\n";
    structure = structure + " <A HREF=\"#inicio\">Comienzo de la página</A>\n"; structure = structure + "<BR/>\n";:};

BLQ ::= left_bracket {:structure = structure + "{\n";:} SENTLIST:sentlist right_bracket {:structure = structure + "}<BR/>\n";:};

LISTPARAM ::= LISTPARAM:listparam comma {:structure = structure + ", ";:}TYPE:type ident:ident1 {:structure = structure + "<SPAN CLASS=\"palres\">";
    switch(type){
    case "v": structure = structure + "void </SPAN>";listparam = listparam + ", void "+ident1; break;
    case "i": structure = structure + "int </SPAN>";listparam = listparam + ", int "+ident1; break;
    case "f": structure = structure + "float </SPAN>";listparam = listparam + ", float "+ident1; break;
    };structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";RESULT = listparam;:} 
| TYPE:type ident:ident1 {:String param = "";structure = structure + "<SPAN CLASS=\"palres\">";
    switch(type){
    case "v": structure = structure + "void </SPAN>";param = param + "void "; break;
    case "i": structure = structure + "int </SPAN>";param = param + "int "; break;
    case "f": structure = structure + "float </SPAN>";param = param + "float "; break;
    }; structure = structure + "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";
    param = param + ident1; 
    RESULT = param;
:};

TYPE ::= void_token {:RESULT = "v";:}| int_token {:RESULT = "i";:} | float_token{:RESULT = "f";:};

SENTLIST ::= SENTLIST {:structure = structure + "<DIV style=\"text-indent: .5cm\">";:} SENT:sent {:structure = structure + "</DIV>\n";RESULT = sent;:} 
| {:structure = structure + "<DIV style=\"text-indent: .5cm\">";:} SENT:sent {:structure = structure  + "</DIV>\n";RESULT = sent;:};

SENT ::=  ID:ident1 equal {:structure = structure + " = ";:} EXP:exp semicolon {:structure = structure  + ";";RESULT = exp;:};

SENT::= TYPE:type {:
    switch(type){
    case "v": structure = structure + "<SPAN CLASS=\"palres\">void</SPAN>  "; break;
    case "i": structure = structure + "<SPAN CLASS=\"palres\">int</SPAN> "; break;
    case "f": structure = structure + "<SPAN CLASS=\"palres\">float</SPAN> "; break;
    };:} LID:ident1 semicolon {:
    boolean repeated = false;
    for(int i=0;i<variables.length;i++){
        if(ident1.split(">")[2].split("<")[0].equals(variables[i])){
            repeated=true;
        }
    }
    if(!repeated){
        String[] res = new String[variables.length+1];
        for(int i=0;i<variables.length;i++){
            res[i]=variables[i];
        }
        res[variables.length]=ident1.split(">")[2].split("<")[0];
        variables = res;
    }
    structure = structure + ident1+";";
:} 
| ident:ident1 equal  {:
    boolean isVariable=false;
    for(int i=0;i<variables.length;i++){
        if(variables[i].equals(ident1)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a> = ";
        }
    }
    if (!isVariable){   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a> = ";
    }:} 
    EXP:exp semicolon {:structure = structure + ";";RESULT = exp;:} 
| ident:ident1 left_parenthesis {:structure = structure + "<A HREF=\"#"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></A>(";:} LEXP:lexp right_parenthesis semicolon {:structure = structure + ");";RESULT = lexp;:} 
| return_token {:structure = structure + "<SPAN CLASS=\"palres\">return</SPAN> ";:} EXP semicolon {:structure = structure + ";";:};

SENT ::= if_token left_parenthesis {:structure = structure + "if (";:}LCOND:lcond right_parenthesis then_token {:structure = structure + ") then";structure = structure + "<BR/>\n";RESULT = lcond;:} BLQ:blq else_token {:structure = structure + "else";structure = structure + "<BR/>\n"; RESULT = blq;:} BLQ
| for_token left_parenthesis ident:ident1 equal {:structure = structure + "for("+"<SPAN CLASS=\"ident\">"+ident1+ "</SPAN> = ";:} EXP:exp semicolon {:structure = structure +  ";";RESULT = exp;:} 
        LCOND:lcond semicolon ident:ident2 equal {:lcond = lcond + "; <SPAN CLASS=\"ident\">"+ident2+"</SPAN> = ";RESULT = lcond;:} EXP:exp1 right_parenthesis {:exp1 = exp1 + ")";exp1 = exp1 + "<BR/>\n"; RESULT = exp1;:}BLQ
| while_token left_parenthesis {:structure = structure + "while (";:} LCOND:lcond right_parenthesis {:structure = structure + ")";lcond = lcond + "<BR/>\n";RESULT = lcond;:} BLQ
| do_token {:structure = structure + "do ";structure = structure + "<BR/>\n";:} BLQ:blq until_token left_parenthesis {:structure = structure + "until (";RESULT = blq;:} LCOND:lcond right_parenthesis {:structure = structure + ")";RESULT = lcond;:}
| BLQ:blq {::};

LCOND ::= LCOND OPL:opl {:
    switch(opl){
        case "a": structure = structure + " and "; break;
        case "o": structure = structure + " or "; break;
    };:} LCOND 
| COND 
| not {:structure = structure + " not ";:}COND;

OPL ::= or {:RESULT = "o";:} | and {:RESULT = "a";:} ;

COND ::= EXP OPR:opr {:
    switch(opr){
        case "lt": structure = structure + " < "; break;
        case "mt": structure = structure + " > "; break;
        case "mte": structure = structure + " >= "; break;
        case "lte": structure = structure + " <= "; break;
        case "de": structure = structure + " == "; break;
    };:}   EXP ;

OPR::= double_equal{:RESULT = "de";:} | less_than {:RESULT = "lt";:} | more_than {:RESULT = "mt";:} | more_than_equal_to  {:RESULT = "mte";:} | less_than_equal_to {:RESULT = "lte";:};

LEXP ::= EXP | LEXP comma {:structure = structure + ", ";String s = ", ";RESULT = s;:} EXP;

EXP ::= EXP OP:op {:
    switch(op){
    case "as": structure = structure + " + "; break;
    case "ss": structure = structure + " - "; break;
    case "ms": structure = structure + " * "; break;
    case "s": structure = structure + " / "; break;
    case "p": structure = structure + " % "; break;
    }:} EXP  | FACTOR ;

OP ::= addition_sign {:RESULT = "as";:} | substraction_sign {:RESULT = "ss";:} | multiplication_sign {:RESULT = "ms";:}| slash {:RESULT = "s";:}| percent{:RESULT = "p";:};

FACTOR ::= ident:ident1 left_parenthesis {:
    structure = structure + "<A HREF=\"#"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></A>(";:}LEXP:lexp right_parenthesis {:structure = structure + ")" ; RESULT = lexp;:} 
| left_parenthesis {:
    structure = structure + "(";:}EXP:exp right_parenthesis {:structure = structure + ")";RESULT = exp;:}
| constint:const1 {:
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>";:} 
| constfloat:const1 {:
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>";:} 
| constlit: const1 {:
    structure = structure + "<SPAN CLASS=\"cte\">"+const1+"</SPAN>" ;:} 
| ID:id {:
    boolean isVariable=false;
    for(int i=0;i<variables.length;i++){
        if(variables[i].equals(id)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+id+"\"><SPAN CLASS=\"id\">"+id+"</SPAN></a>";
        }
    }
    if (!isVariable){   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+id+"</SPAN></a>";
    }:};

LFIELD ::= LFIELD TYPE:type LID:ident1 semicolon {:
    switch(type){
    case "v": structure = structure + "<DIV style=\"text-indent: .5cm\">void "+ident1+";</DIV>\n"; break;
    case "i": structure = structure + "<DIV style=\"text-indent: .5cm\">int "+ident1+";</DIV>\n"; break;
    case "f": structure = structure + "<DIV style=\"text-indent: .5cm\">float "+ident1+";</DIV>\n"; break;
    };:}
 | TYPE:type LID:ident1 semicolon {:
    switch(type){
    case "v": structure = structure + "<DIV style=\"text-indent: .5cm\">void "+ident1+";</DIV>\n"; break;
    case "i": structure = structure + "<DIV style=\"text-indent: .5cm\">int "+ident1+";</DIV>\n"; break;
    case "f": structure = structure + "<DIV style=\"text-indent: .5cm\">float "+ident1+";</DIV>\n"; break;
    };:};

ID ::= ident:ident1 {:RESULT = ident1;:}  
| ident:ident1 dot ident:ident2 {:

structure = structure + "<a href=\"#"+ident1+"\">"+ident1+"</a>.<a href=\"#"+ident1+":"+ident2+"\">"+ident2+"</a>";:};

LID ::= ID:ident1 {:RESULT = "<a><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>";:}  
| LID:lid1 comma ID:id1 {:RESULT = lid1 + ", <a><SPAN CLASS=\"ident\">"+id1+"</SPAN></a>";:};

ID ::= ident:ident1 LDIM:ldim1 {:
    boolean isVariable=false;
    for(int i=0;i<variables.length-1;i++){
        if(variables[i].equals(ident1)){
            isVariable = true;
            structure = structure + "<a href=\"#"+actualHeader+":"+ident1+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>+ldim1";
        }
    }
    if (!isVariable){   
        structure = structure + "<a href=\"#"+actualHeader+"\"><SPAN CLASS=\"ident\">"+ident1+"</SPAN></a>+ldim1";
    }:};

LDIM ::= LDIM:ldim1 left_squarebracket constint:const1 right_squarebracket {:structure = structure + "["+const1+"]";:}
| left_squarebracket constint:const1 right_squarebracket {:structure = structure + "["+const1+"]";:};