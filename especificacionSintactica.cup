import java_cup.runtime.*;
parser code
{:
	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}
:}

terminal ident, left_parenthesis, right_parenthesis, left_bracket, right_bracket, 
	addition_sign, substraction_sign, multiplication_sign, slash, percent, constint, constfloat, constlit, void_token, int_token,
 	float_token,comma, semicolon, equal, until_token, while_token, else_token, if_token, then_token, for_token, return_token,
	more_than, less_than, less_than_equal_to, more_than_equal_to, double_equal, do_token,  and, or, not, struct, dot,
	left_squarebracket, right_squarebracket;
non terminal   PROGRAM, PART, TYPE, RESTPART, LISTPARAM, BLQ, SENTLIST, SENT, LID, EXP, OP, FACTOR, LEXP, LFIELD,
	 LCOND, OPL, COND, OPR, ID, LDIM;



precedence left addition_sign;
precedence left substraction_sign;
precedence left multiplication_sign;
precedence left slash;
precedence left percent;
precedence left and;
precedence left or;
precedence left equal;


PROGRAM ::= PART PROGRAM | PART;
PART ::= TYPE RESTPART |  struct ident left_bracket LFIELD right_bracket semicolon;
RESTPART ::= ident left_parenthesis LISTPARAM right_parenthesis BLQ;
BLQ ::= left_bracket SENTLIST right_bracket;
LISTPARAM ::= LISTPARAM comma TYPE ident | TYPE ident;
TYPE ::= void_token | int_token | float_token;
SENTLIST ::= SENTLIST SENT | SENT;
SENT ::=  ID equal EXP semicolon;
SENT::= TYPE LID semicolon | ident equal EXP semicolon | ident left_parenthesis LEXP right_parenthesis semicolon | return_token EXP semicolon;
SENT ::= if_token left_parenthesis LCOND right_parenthesis then_token BLQ else_token BLQ
	| for_token left_parenthesis ident equal EXP semicolon LCOND semicolon ident equal EXP right_parenthesis BLQ
	| while_token left_parenthesis LCOND right_parenthesis BLQ
	| do_token BLQ until_token left_parenthesis LCOND right_parenthesis
	| BLQ;
LCOND ::= LCOND OPL LCOND | COND | not COND;
OPL ::= or | and;
COND ::= EXP OPR EXP;
OPR::= double_equal | less_than | more_than | more_than_equal_to | less_than_equal_to;

LEXP ::= EXP | LEXP comma EXP;
EXP ::= EXP OP EXP | FACTOR;
OP ::= addition_sign | substraction_sign | multiplication_sign | slash | percent;
FACTOR ::= ident left_parenthesis LEXP right_parenthesis | left_parenthesis EXP right_parenthesis |
	 constint | constfloat | constlit | ID;
LFIELD ::= LFIELD TYPE LID semicolon  | TYPE LID semicolon;
ID ::= ident | ident dot ident;
LID ::= ID | LID comma ID;
ID ::= ident LDIM;
LDIM ::= LDIM left_squarebracket constint right_squarebracket | left_squarebracket constint right_squarebracket;