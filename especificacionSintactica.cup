import java_cup.runtime.*;


parser code{:
    String filename = Analizador.filename;
	public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
	}
:}


/* Terminals (tokens returned by the scanner). */
terminal  left_parenthesis, right_parenthesis, left_bracket, right_bracket, 
	addition_sign, substraction_sign, multiplication_sign, slash, percent, constint, constfloat, constlit, void_token, int_token,
 	float_token,comma, semicolon, equal, until_token, while_token, else_token, if_token, then_token, for_token, return_token,
	more_than, less_than, less_than_equal_to, more_than_equal_to, double_equal, do_token,  and, or, not, struct, dot,
	left_squarebracket, right_squarebracket;
terminal  String ident;


non terminal  PROGRAM, PART, RESTPART, LISTPARAM, BLQ, SENTLIST, SENT, LID, EXP, FACTOR, LEXP, LFIELD,
	 LCOND, COND, LDIM, S;
non terminal String ID, OPL, OPR, TYPE, OP;



precedence left addition_sign;
precedence left substraction_sign;
precedence left multiplication_sign;
precedence left slash;
precedence left percent;
precedence left and;
precedence left or;
precedence left equal;

S ::= {:System.out.println("<!DOCTYPE html>");System.out.println("<html>");System.out.println("<head>");System.out.println("<title></title>");System.out.println("<style>.cte {color:rgb(19,189,72);}.ident {color:rgb(55,40,244);}.palres {color:rgb(0,0,0);font-weight:bold;}</style>");System.out.println("</head>");System.out.println("<body>");
System.out.println("<A NAME=\"inicio\"><H1>Programa: "+filename+"</H1><H2>Funciones</H2>");
:}
    PROGRAM:prog {:System.out.println("</body>");System.out.println("</HTML>");:};
PROGRAM ::=  PART:part {::} PROGRAM 
    |  PART ;
PART ::= TYPE:type {:System.out.println("<hr/>");
    System.out.println("<A NAME=\"rest\">");System.out.println("<code>");System.out.print("<SPAN CLASS=\"palres\">");switch(type){
    case "v": System.out.print("void </SPAN>"); break;
    case "i": System.out.print("int </SPAN>"); break;
    case "f": System.out.print("float </SPAN>"); break;
    };:} RESTPART {:System.out.println("</code>");:}  |  struct ident:ident1 left_bracket {:System.out.println("<code>"); 
System.out.println("<SPAN CLASS=\"palres\">struct</SPAN><SPAN CLASS=\"ident\"> "+ident1+"</SPAN> {");:} LFIELD right_bracket semicolon {:System.out.println("};"); System.out.println("<A HREF=\"#"+ident1+"\">Comienzo de la funci칩n</A>");
System.out.println("<A HREF=\"#inicio\">Comienzo de la p치gina</A>");System.out.println("</code>");System.out.println("<BR/>");:};
RESTPART ::= ident:ident1 left_parenthesis {:System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> ("); RESULT =ident1;:} LISTPARAM right_parenthesis {:System.out.println(")");:} BLQ   {:System.out.println("<A HREF=\"#"+ident1+"\">Comienzo de la funci칩n</A>");
System.out.println("<A HREF=\"#inicio\">Comienzo de la p치gina</A>"); System.out.println("<BR/>");:};
BLQ ::= left_bracket {:System.out.println("{");:} SENTLIST right_bracket {:System.out.println("}<BR/>");:};
LISTPARAM ::= LISTPARAM comma {:System.out.print(", ");:}TYPE:type ident:ident1 {:System.out.print("<SPAN CLASS=\"palres\">");switch(type){
case "v": System.out.print("void </SPAN>"); break;
case "i": System.out.print("int </SPAN>"); break;
case "f": System.out.print("float </SPAN>"); break;
};System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>");:} | TYPE:type ident:ident1 {:System.out.print("<SPAN CLASS=\"palres\">");switch(type){
case "v": System.out.print("void </SPAN>"); break;
case "i": System.out.print("int </SPAN>"); break;
case "f": System.out.print("float </SPAN>"); break;
}; System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>");:};
TYPE ::= void_token {:RESULT = "v";:}| int_token {:RESULT = "i";:} | float_token{:RESULT = "f";:};
SENTLIST ::= SENTLIST {:System.out.print("<DIV style=\"text-indent: .5cm\">");:} SENT {:System.out.println("</DIV>");:} | {:System.out.print("<DIV style=\"text-indent: .5cm\">");:} SENT {:System.out.println("</DIV>");:};
SENT ::=  ID:ident1 equal {:System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> = ");:} EXP semicolon {:System.out.print(";");:};
SENT::= TYPE:type {:switch(type){
case "v": System.out.print("<SPAN CLASS=\"palres\">void</SPAN>  "); break;
case "i": System.out.print("<SPAN CLASS=\"palres\">int</SPAN> "); break;
case "f": System.out.print("<SPAN CLASS=\"palres\">float</SPAN> "); break;
};:} LID:ident1 semicolon {:System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");:} | ident:ident1 equal  {:System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN> = ");:} 
EXP semicolon {:System.out.print(";");:} 
| ident:ident1 left_parenthesis {:System.out.print("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>( ");:} LEXP right_parenthesis semicolon {:System.out.print(");");:} 
| return_token {:System.out.print("<SPAN CLASS=\"palres\">return</SPAN> ");:} EXP semicolon {:System.out.print(";");:};
SENT ::= if_token left_parenthesis {:System.out.print("if (");:}LCOND right_parenthesis then_token {:System.out.println(") then");System.out.println("<BR/>");:} BLQ else_token {:System.out.println("else");System.out.println("<BR/>");:} BLQ
	| for_token left_parenthesis ident:ident1 equal {:System.out.print("for("+"<SPAN CLASS=\"ident\">"+ident1+ "</SPAN> = ");:} EXP semicolon {:System.out.print(";");:} 
        LCOND semicolon ident:ident2 equal {:System.out.print("; <SPAN CLASS=\"ident\">"+ident2+"</SPAN> = ");:} EXP right_parenthesis {:System.out.println(")");System.out.println("<BR/>");:}BLQ
	| while_token left_parenthesis {:System.out.print("while (");:} LCOND right_parenthesis {:System.out.println(")");System.out.println("<BR/>");:} BLQ
	| do_token {:System.out.println("do ");System.out.println("<BR/>");:} BLQ until_token left_parenthesis {:System.out.print("until (");:} LCOND right_parenthesis {:System.out.print(")");:}
	| BLQ;
LCOND ::= LCOND OPL:opl {:switch(opl){
case "a": System.out.print(" and "); break;
case "o": System.out.print(" or "); break;
};:} LCOND | COND | not {:System.out.print(" not ");:}COND;
OPL ::= or {:RESULT = "o";:} | and {:RESULT = "a";:} ;
COND ::= EXP OPR:opr {:switch(opr){
case "lt": System.out.print(" < "); break;
case "mt": System.out.print(" > "); break;
case "mte": System.out.print(" >= "); break;
case "lte": System.out.print(" <= "); break;
case "de": System.out.print(" == "); break;
};:}   EXP ;
OPR::= double_equal{:RESULT = "de";:} | less_than {:RESULT = "lt";:} | more_than {:RESULT = "mt";:} | more_than_equal_to  {:RESULT = "mte";:} | less_than_equal_to {:RESULT = "lte";:};

LEXP ::= EXP | LEXP comma {:System.out.print(", ");:} EXP;
EXP ::= EXP OP:op {:switch(op){
case "as": System.out.print(" + "); break;
case "ss": System.out.print(" - "); break;
case "ms": System.out.print(" * "); break;
case "s": System.out.print(" / "); break;
case "p": System.out.print(" % "); break;
}:} EXP  | FACTOR ;
OP ::= addition_sign {:RESULT = "as";:} | substraction_sign {:RESULT = "ss";:} | multiplication_sign {:RESULT = "ms";:}| slash {:RESULT = "s";:}| percent{:RESULT = "p";:};
FACTOR ::= ident:ident1 left_parenthesis {:System.out.print("<SPAN CLASS=\"ident\">"+ident1 +"</SPAN> (");:}LEXP right_parenthesis {:System.out.print(")");:} | left_parenthesis {:System.out.print("(");:}EXP right_parenthesis {:System.out.print(")");:}|
	 constint:const1 {:System.out.print("<SPAN CLASS=\"cte\">"+const1+"</SPAN>");:} | constfloat:const1 {:System.out.print("<SPAN CLASS=\"cte\">"+const1+"</SPAN>");:} | constlit: const1 {:System.out.print("<SPAN CLASS=\"cte\">"+const1+"</SPAN>");:} | ID:id {:System.out.print(id);:};
LFIELD ::= LFIELD TYPE:type LID:ident1 semicolon {:switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");:} | TYPE:type LID:ident1 semicolon {:switch(type){
case "v": System.out.print("void "); break;
case "i": System.out.print("int "); break;
case "f": System.out.print("float "); break;
};System.out.println("<SPAN CLASS=\"ident\">"+ident1+"</SPAN>;");:};
ID ::= ident:ident1 {:String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";RESULT = s;:}  | ident:ident1 dot ident:ident2 {:String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>.<SPAN CLASS=\"ident\">"+ident2+"</SPAN>";RESULT=s;:};
LID ::= ID:ident1 {:RESULT = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>";:}  | LID:lid1 comma ID:id1 {:String s = lid1+"</SPAN> , <SPAN CLASS=\"ident\">"+id1; RESULT = s;:};
ID ::= ident:ident1 LDIM:ldim1 {:String s = "<SPAN CLASS=\"ident\">"+ident1+"</SPAN>"+ldim1;RESULT = s;:};
LDIM ::= LDIM:ldim1 left_squarebracket constint:const1 right_squarebracket {:String s = ldim1+"["+const1+"]";RESULT = s;:}| left_squarebracket constint:const1 right_squarebracket {:String s = "["+const1+"]";RESULT = s;:};